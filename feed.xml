<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-08-26T22:39:26+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">M. Shamshad</title><subtitle>I have dream...</subtitle><author><name>M. Shamshad</name><email>shamshad.rattan@gmail.com</email></author><entry><title type="html">A tutorial on Genome-Wide Association Studies (GWAS) in Tassel (GUI)</title><link href="http://localhost:4000/posts/2021/01/A-tutorial-on-Genome-Wide-Association-Studies/" rel="alternate" type="text/html" title="A tutorial on Genome-Wide Association Studies (GWAS) in Tassel (GUI)" /><published>2021-01-20T00:00:00+05:30</published><updated>2024-10-06T20:53:46+05:30</updated><id>http://localhost:4000/posts/2021/01/A-tutorial-on-Genome-Wide-Association-Studies</id><content type="html" xml:base="http://localhost:4000/posts/2021/01/A-tutorial-on-Genome-Wide-Association-Studies/"><![CDATA[<p>Genome-wide association studies (GWAS) increase their popularity among medical, biological, and social sciences to identify the association between single nucleotide polymorphisms and phenotypic traits. This tutorial aims to provide a guidelines for conducing genome wide analysis in Tassel.</p>

<!--more-->

<h2 id="tassel">TASSEL</h2>
<p><strong>TASSEL</strong> also known as for the <code class="language-plaintext highlighter-rouge">Evaluate traits aSSociations, Evolutionary Patterns, and linkage disequilibrium.</code> It is a powerful statistical software to conduct <code class="language-plaintext highlighter-rouge">association mapping</code> such as <code class="language-plaintext highlighter-rouge">General Linear Model (GLM)</code> and <code class="language-plaintext highlighter-rouge">Mixed Linear Model (MLM)</code>. The Tassel has ability to handle a wide range of indels (insertion &amp; deletions).</p>

<p>The GUI (graphical user interface) version of TASSEL is very well built for anyone who does not have a background or experience in working in <code class="language-plaintext highlighter-rouge">command line</code>. I will show how to prepare <code class="language-plaintext highlighter-rouge">input</code> files and run association analysis in TASSEL. For detailed information on TASSEL, user’s guide and further documentation please visit: 
<a href="https://www.maizegenetics.net/tassel">https://www.maizegenetics.net/tassel</a></p>

<h2 id="10-download-and-install-tassel-software">1.0 Download and install TASSEL software</h2>
<p>Download and install the latest version of the <strong> TASSEL software </strong> at this link:
<a href="https://www.maizegenetics.net/tassel">https://www.maizegenetics.net/tassel</a></p>

<hr />

<h3 id="11-preparing-the-input-files">1.1: Preparing the Input files</h3>

<p><b><u>Phenotype  file</u></b></p>

<p>Prepare the phenotype file as shown below in the figure, and please remember if your data has <code class="language-plaintext highlighter-rouge">covariates</code> such as <code class="language-plaintext highlighter-rouge">sex</code>, <code class="language-plaintext highlighter-rouge">age</code> or <code class="language-plaintext highlighter-rouge">treatment</code>, then, please categories them with header name <code class="language-plaintext highlighter-rouge">factor</code>.</p>

<center><img src="/images/biostat/gwas/pheno.png" alt="Phenotype data" /></center>

<hr />
<p><b><u> Genotype file</u></b></p>

<p>TASSEL allows various genotype file formats such as <code class="language-plaintext highlighter-rouge">VCF</code> (variant call format), <code class="language-plaintext highlighter-rouge">.hmp.txt</code>, and <code class="language-plaintext highlighter-rouge">plink</code>. In this tutorial, I am using the <code class="language-plaintext highlighter-rouge">hmp.txt</code> version of the genotype file. The below githe screenshot of the hmp.txt genotype file.</p>

<center><img src="/images/biostat/gwas/geno.JPG" alt="Genotype data" /></center>

<hr />

<h3 id="12-importing-phenotype-and-genotype-files">1.2: Importing phenotype and genotype files</h3>
<p>Import the files by following the steps shown below.</p>
<blockquote>
  <p><strong>Tip!</strong> Both files can be opened at same time holding <code class="language-plaintext highlighter-rouge">CTRL</code> and clicking the file names.</p>
</blockquote>

<center><img src="/images/biostat/gwas/importfiles.gif" alt="Import data" /></center>

<hr />

<h3 id="13-checking-data-on-the-basis-of-phenotype-distribution-plot">1.3 Checking data on the basis of Phenotype distribution plot</h3>
<p>It is always a wise idea to look at the phenotype distribution by plotting to check for any outliers. Follow below steps to plot histogram of your phenotype data.</p>

<center><img src="/images/biostat/gwas/phenoplot.gif" alt="Phenotype distribution" /></center>

<hr />

<h3 id="15-genotype-summary-analysis">1.5 Genotype summary analysis</h3>
<p>Next crucial step is to look at the genotype data by simply following the steps shown.
Couple of keys things to look at are:</p>
<ol>
  <li>Minor allele frequency distribution </li>
  <li>Missing genotypic data to see if it requires to be imputed </li>
  <li>Proportion of heterozygous in the samples to check for self-ed samples </li>
</ol>

<center><img src="/images/biostat/gwas/genosummary.gif" alt="Genotype summary" /></center>
<hr />

<h2 id="20-conduct-gwas-analysis">2.0 Conduct GWAS analysis</h2>

<h3 id="21-multidimensional-scaling-mds">2.1 multidimensional scaling (MDS)</h3>
<p>MDS output can be used as the covariate in the GLM or MLM to correct for population structure.
Please follow the steps shown below:</p>

<center><img src="/images/biostat/gwas/mds.gif" alt="MDS" /></center>

<hr />

<h3 id="22-intersecting-the-files">2.2 Intersecting the files</h3>
<p>Intersect the <code class="language-plaintext highlighter-rouge">genotype</code>, <code class="language-plaintext highlighter-rouge">phenotype</code> and <code class="language-plaintext highlighter-rouge">MDS</code> files by following the steps below:</p>

<center><img src="/images/biostat/gwas/intersect.gif" alt="Intersect files" /></center>

<hr />

<h2 id="30-running-general-linear-model-glm">3.0 running General Linear Model (GLM)</h2>
<p>Run the GLM analysis by selecting the <code class="language-plaintext highlighter-rouge">intersected</code> files following the steps below:</p>

<center><img src="/images/biostat/gwas/glm.gif" alt="GLM" /></center>

<hr />

<p>The output of the GLM analysis is produced under the <code class="language-plaintext highlighter-rouge">Result</code> node. The GLM association test can be evaluated by plotting <code class="language-plaintext highlighter-rouge">Q-Q plot</code> and the <code class="language-plaintext highlighter-rouge">Manhattan</code> plot as shown below.</p>

<center>
<img src="/images/biostat/gwas/manhattan.png" width="auto" height="200" alt="GLM Manhattan plot" />
<img src="/images/biostat/gwas/qqplot.png" width="auto" height="200" alt="Q-Q plot" />
</center>

<p>From the above Q-Q plot, we can see that are several markers that appear to be falsely associated with the trait, therefore, to control this confounding effect, use <code class="language-plaintext highlighter-rouge">Kinship</code> matrix as an another covariate in the linear model</p>

<hr />

<h2 id="40-mixed-linear-model-mlm">4.0 Mixed Linear Model (MLM)</h2>

<p>Mixed Linear Model used <a href="https://www.nature.com/articles/ng1702">Unified Mixed-Model Method for Association Mapping</a>. It helps to reduces Type I error in association mapping with complex pedigrees, families, founding effects and population structure.</p>

<h3 id="41-calculating-kinship-matrix">4.1 Calculating Kinship matrix</h3>
<p>Follow the below steps to calculate the kinship matrix:</p>

<center><img src="/images/biostat/gwas/kinship.gif" alt="Kinship matrix" /></center>

<hr />

<h3 id="42-running-mixed-linear-model-mlm">4.2 running Mixed Linear Model (MLM)</h3>
<p>MLM model includes the PCA and the kinship matrix i.e. MLM(PCA+K).</p>

<p>Therefore, once the Kinship matrix has been calculated, MLM can be now be conducted by following below steps:</p>

<center><img src="/images/biostat/gwas/mlm.gif" alt="MLM steps" /></center>

<hr />

<p>Plot the output (MLM stats file in the Results branch following the above shown steps).</p>
<center>
<img src="/images/biostat/gwas/manhattanMlm.png" width="auto" height="200" alt="MLM Manhattan plot" />
<img src="/images/biostat/gwas/qqmlm.png" width="auto" height="200" alt="MLM Q-Q plot" />                                                           
</center>

<hr />

<h3 id="42-exporting-results">4.2 Exporting results</h3>
<p>One may export the results in .txt format by the following the below steps:</p>

<center><img src="/images/biostat/gwas/export.gif" alt="Export results" />
</center>

<hr />

<h3 id="43-significance-threshold">4.3 Significance Threshold</h3>

<p>Bonferroni threshold can be determined to identify significantly markers associated with the trait  by using the below equation:</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">P</span> <span class="err">≤</span> <span class="nt">1</span><span class="o">/</span><span class="nt">N</span> <span class="o">(</span><span class="err">α</span> <span class="o">=</span><span class="nt">0</span><span class="nc">.05</span><span class="o">)</span>
</code></pre></div></div>
<p>where, N is the total number of markers tested in association analysis) was used to identify the most significantly markers associated with the trait. Similarly, another way is to perform <code class="language-plaintext highlighter-rouge">FDR</code> (<code class="language-plaintext highlighter-rouge">False Discovery Rate</code>) correction method.</p>

<hr />
<center> <b>End of Tutorial</b></center>

<hr />

<p><strong>Thank you</strong> for reading this tutorial. If you have any query or comments, please let me know in the comment section below or send me an email.</p>

<hr />
<p><b> Bibliography </b></p>
<ol>
<li>
<p>	Bradbury PJ, Zhang Z, Kroon DE, Casstevens TM, Ramdoss Y, Buckler ES. (2007)<cite> TASSEL: Software for association mapping of complex traits in diverse samples.</cite> Bioinformatics 23:2633-2635.</p>
</li>
<li>
<p>Yu, J., Pressoir, G., Briggs, W. et al. (2006) <cite>A unified mixed-model method for association mapping that accounts for multiple levels of relatedness</cite> Nat Genet 38, 203–208. https://doi.org/10.1038/ng1702 </p>
</li>
</ol>]]></content><author><name>M. Shamshad</name><email>shamshad.rattan@gmail.com</email></author><category term="TASSEL" /><category term="software" /><category term="GWAS GUI" /><category term="TASSEL" /><category term="Genome-wide association analysis" /><category term="Linear model" /><category term="GLM" /><category term="MLM" /><summary type="html"><![CDATA[Genome-wide association studies (GWAS) increase their popularity among medical, biological, and social sciences to identify the association between single nucleotide polymorphisms and phenotypic traits. This tutorial aims to provide a guidelines for conducing genome wide analysis in Tassel.]]></summary></entry><entry><title type="html">A tutorial on investigate genetic admixture using STRUCTURE software</title><link href="http://localhost:4000/posts/2021/01/investigate-genetic-admixture-using-STRUCTURE-software/" rel="alternate" type="text/html" title="A tutorial on investigate genetic admixture using STRUCTURE software" /><published>2021-01-05T00:00:00+05:30</published><updated>2024-10-06T20:53:46+05:30</updated><id>http://localhost:4000/posts/2021/01/investigate-genetic-admixture-using-STRUCTURE-software</id><content type="html" xml:base="http://localhost:4000/posts/2021/01/investigate-genetic-admixture-using-STRUCTURE-software/"><![CDATA[<p><strong>Structure Software</strong> is a freely available software package that one may use for rigorous investigation of <code class="language-plaintext highlighter-rouge">admixed individuals</code>; identification of <code class="language-plaintext highlighter-rouge">point of hybridization</code> and <code class="language-plaintext highlighter-rouge">migrants</code>; and estimate over all <code class="language-plaintext highlighter-rouge">structure</code> of a population using a commonly used genetic markers such as <code class="language-plaintext highlighter-rouge">SNPs</code> and <code class="language-plaintext highlighter-rouge">SSRs</code>. This software was developed by <strong>Pritchard Lab</strong> at <strong>Stanford University</strong> and can downloaded at this <a href="https://web.stanford.edu/group/pritchardlab/structure.html">link</a>.
<!--more--></p>

<hr />
<p>Download sample data set: <a href="/images/biostat/structure/data_structure_1.txt">click here</a></p>

<hr />
<p>In this tutorial, I will show how to prepare <code class="language-plaintext highlighter-rouge">input</code> files and run the <code class="language-plaintext highlighter-rouge">Structure</code> software. For detail information, please read this article at this <a href="https://web.stanford.edu/group/pritchardlab/structure.html">link</a></p>

<hr />
<h2 id="step-1-preparing-the-input-file">Step 1: Preparing the Input file</h2>
<p>In this tutorial, I am using <code class="language-plaintext highlighter-rouge">numerical</code> SNP data as in <code class="language-plaintext highlighter-rouge">input</code> genotype file. One can convert their genotype data in numerical format in <code class="language-plaintext highlighter-rouge">TASSEL</code> software or any software package available as per ones convenience. The file needs to be formatted properly as shown below in the image below and save it as <code class="language-plaintext highlighter-rouge">.txt</code> file.</p>

<p align="center">
<img src="/images/biostat/structure/input-structure.webp" alt="Input structure File" />
</p>

<hr />

<p><strong>Please Note</strong> Missing data is denoted as <code class="language-plaintext highlighter-rouge">-9</code> in the above image.</p>

<h2 id="step-2-running-the-structure-biostat">Step 2: Running the Structure biostat</h2>
<!--more-->
<h3 id="11-importing-input-file">1.1 Importing input file</h3>

<p>Once the input file with the correct header and format is ready, import the the file in <code class="language-plaintext highlighter-rouge">Structure</code> software using the steps shown in the below figure. The importing steps include <strong>4</strong> steps, please make sure to select correct directory and file name. At <strong>step 2 of 4</strong> make sure to correctly input <code class="language-plaintext highlighter-rouge">number of markers</code>, <code class="language-plaintext highlighter-rouge">samples/individual</code>, and <code class="language-plaintext highlighter-rouge">ploidy</code> (if genotypes are ‘A’ then enter 1 but if, it is ‘AA’ enter 2), and finally, enter how the <code class="language-plaintext highlighter-rouge">missing data</code> are indicated as in the file. In this tutorial, I denoting the missing data ‘-9’.</p>

<hr />
<p align="center">
<img src="/images/biostat/structure/Import-structure.gif" alt="Import data in structure" />
</p>
<hr />

<h3 id="step-12-set-parameter">Step: 1.2 Set Parameter</h3>
<p>Follow the steps shown in the below figure to run this step. <strong>Please remember</strong> One make custom add the <code class="language-plaintext highlighter-rouge">length of burning period</code> and <code class="language-plaintext highlighter-rouge">Number of MCMC Reps after burnin</code>.</p>

<hr />
<p align="center">
<img src="/images/biostat/structure/Set-Parameter.gif" alt="Set parameters structure" />
</p>
<hr />

<h3 id="step-13-running-the-project">Step: 1.3 Running the project</h3>
<p>Follow the steps shown in the below figure to run this step. <strong>Please remember</strong> to run at least 10 <code class="language-plaintext highlighter-rouge">number of iterations</code>. One see the job progress at the bottom black window of the shell.</p>

<hr />
<p align="center">
<img src="/images/biostat/structure/run-structure-project.gif" alt="Running the project structure" />
</p>

<hr />

<h3 id="step-14-viewing-the-results">Step: 1.4 Viewing the results</h3>
<p>Follow the steps shown in the below figure to run this step. <strong>Please remember</strong> under the <code class="language-plaintext highlighter-rouge">Results</code> folder there are several branches of the results with various <code class="language-plaintext highlighter-rouge">k</code> values, which indicates <strong>number of sub-populations</strong> estimated from the given genetic data. It can tricky to pick the correct number of <code class="language-plaintext highlighter-rouge">k</code> for the data, and to solve this follow the next step to prepare files for a different software known as <code class="language-plaintext highlighter-rouge">Structure Harvester</code>.</p>

<hr />

<p align="center">
<img src="/images/biostat/structure/structure-resultus.gif" alt="Viewing the structure results" />
</p>

<!--more-->
<h2 id="21-preparing-files-for-structure-harvester">2.1 Preparing Files for Structure Harvester</h2>
<p><code class="language-plaintext highlighter-rouge">zip</code> all the result files in the results folder.
<!--more--></p>
<p align="center">
<img src="/images/biostat/structure/structure-harvester.gif" alt="Files for Structure Harvester" />
</p>
<hr />

<h2 id="22-running-structure-harvester">2.2 Running Structure Harvester</h2>
<p>One your web browser search for <code class="language-plaintext highlighter-rouge">structure harvester</code>, and click the first the search result. Next, upload the <code class="language-plaintext highlighter-rouge">results.zip</code> file, click <code class="language-plaintext highlighter-rouge">harvest</code> to run the Structure Harvester program. It can take about few mins to run, however, it definitely depends on your data. Once the job is completed, the program outputs the summary of the analysis, the key output to look at is <code class="language-plaintext highlighter-rouge">Delta K</code> plot and <code class="language-plaintext highlighter-rouge">Evanno table</code>.</p>

<hr />
<p align="center">
<img src="/images/biostat/structure/run-structure-harvester.gif" alt="Run Structure Harvester" />
</p>
<!--more-->

<h2 id="23-interpreting-the-output">2.3 Interpreting the output</h2>
<p><code class="language-plaintext highlighter-rouge">Evanno table</code> highlights the significant <code class="language-plaintext highlighter-rouge">k</code> value that is estimated for this genotype data (see below figure). For this tutorial data set, the estimated from <code class="language-plaintext highlighter-rouge">k</code> is 3 subpopulation which is also supported by the <code class="language-plaintext highlighter-rouge">Delta K</code> plot, where a clear peak is see at <code class="language-plaintext highlighter-rouge">K = 3</code> (see Delta K plot below).</p>

<p align="center">
<img src="/images/biostat/structure/ktable.webp" />
</p>
<!--more-->
<p align="center">
<img src="/images/biostat/structure/deltaK.webp" />
</p>

<p><strong>Therefore</strong> the correct bar plot with correct number of sub-population (k) is 3, which can be plotted by following the steps shown in <strong>1.4</strong></p>
<p align="center">
<img src="/images/biostat/structure/structure-result-final.webp" />
</p>

<hr />

<p><strong>Thank you</strong> for reading this tutorial. If you have any questions or comments, please let me know by email.</p>

<hr />
<p>Happy Structure-ing :smiley:</p>
<hr />

<p><b> Bibliography </b></p>
<ol>
         <li>
<p>Pritchard, Jonathan K., William Wen, and Daniel Falush. <cite>"Documentation for STRUCTURE software: Version 2."</cite> (2003).</p>
</li>
         <li>
  <p>Earl, Dent A. <cite> "STRUCTURE HARVESTER: a website and program for visualizing STRUCTURE output and implementing the Evanno method."</cite> Conservation genetics resources 4.2 (2012): 359-361.</p>
  </li>
      </ol>]]></content><author><name>M. Shamshad</name><email>shamshad.rattan@gmail.com</email></author><category term="Structure" /><category term="software" /><category term="Structure software" /><category term="Genetic Admixture" /><category term="Genetic data" /><category term="Population structure" /><summary type="html"><![CDATA[Structure Software is a freely available software package that one may use for rigorous investigation of admixed individuals; identification of point of hybridization and migrants; and estimate over all structure of a population using a commonly used genetic markers such as SNPs and SSRs. This software was developed by Pritchard Lab at Stanford University and can downloaded at this link.]]></summary></entry><entry><title type="html">Plot Genetic Linkage Maps using MapChart software</title><link href="http://localhost:4000/posts/2020/10/mapchart/" rel="alternate" type="text/html" title="Plot Genetic Linkage Maps using MapChart software" /><published>2020-10-10T00:00:00+05:30</published><updated>2024-10-06T20:53:46+05:30</updated><id>http://localhost:4000/posts/2020/10/mapchart</id><content type="html" xml:base="http://localhost:4000/posts/2020/10/mapchart/"><![CDATA[<p><strong>MapChart</strong> is a free software to plot publishing quality genetic linkage maps as well as QTLs. This software was developed at <strong>Wageningen University</strong> by <strong>Roeland E. Voorrips</strong>  and can be downloaded at this <a href="https://www.wur.nl/en/show/Mapchart.htm"> link </a>.</p>

<!--more-->

<p>In this tutorial, We are going to learn how to prepare <code class="language-plaintext highlighter-rouge">input</code> files and plot the genetic linkage map in the <code class="language-plaintext highlighter-rouge">MapChart</code> software. For detail information, please read this article at this <a href="https://www.wur.nl/en/show/Mapchart.htm">link</a>. The software also contains a descriptive manual, please consult it for detailed information.</p>

<h2 id="step-1-preparing-the-input-file">Step 1: Preparing the Input file</h2>
<p>In <code class="language-plaintext highlighter-rouge">MS Excel</code> or any relevant software, create the input file as shown in the images below. <strong>Please Note</strong> third column is optional, which can be used to color code the marker names and position. In this example, I have used <code class="language-plaintext highlighter-rouge">C2</code> to color some markers in the <code class="language-plaintext highlighter-rouge">red</code>.</p>

<p align="center">
<img src="/images/biostat/mapchart/Input-mapChart.webp" alt="Input File" />
</p>

<hr />

<h2 id="step-2-running-the-mapchart-software">Step 2: Running the MapChart software</h2>

<h3 id="11-importing-input-file">1.1 Importing input file</h3>

<p>Open <code class="language-plaintext highlighter-rouge">MapChart</code> and copy the input data from <code class="language-plaintext highlighter-rouge">MS Excel</code>, and paste in the window as shown below.
Please note, if you have data for multiple linkage groups or chromosomes then in the same window add those information starting from different line and make sure to have the correct the chromosome number for each <code class="language-plaintext highlighter-rouge">Group</code>.</p>

<hr />
<p align="center">
<img src="/images/biostat/mapchart/mapchart2.gif" alt="Import data" />
</p>

<hr />

<h3 id="step-12-plot-maps">Step: 1.2 Plot maps</h3>
<p>Once the input data are loaded, click <code class="language-plaintext highlighter-rouge">chart</code> to plot the map. Follow the steps shown in the below figure to run this step. Once the plot is generated, it can be copied and pasted or saved as a desired format.</p>

<hr />
<p align="center">
<img src="/images/biostat/mapchart/mapchart3.gif" alt="Plot" />
</p>

<hr />

<h3 id="step-13-formating-the-plot-optional">Step: 1.3 Formating the plot (optional)</h3>
<p>Under the <code class="language-plaintext highlighter-rouge">Tools</code> click <code class="language-plaintext highlighter-rouge">chart options</code> one can format the plot by choosing the given parameters.</p>

<hr />
<p align="center">
<img src="/images/biostat/mapchart/mapchart4.gif" alt="parameters" />
</p>

<hr />

<h3 id="20-extra-adding-qtl-results-with-linkage-map">2.0 Extra: Adding QTL results with Linkage Map</h3>
<p>To add the QTL scan information by the Linkage map plot, two files are needed:</p>
<ul>
 <li> Graph file (*.txt)-- It contains the QTL scan information such as: Linkage group or chromosome, LOD score, markers name and their position </li>
 <li> MapChart datafile (*.mct) </li>
</ul>
<p>Please make sure to <strong>save</strong> the above two files in the same directory.</p>

<h4 id="21-graph-file">2.1 Graph file</h4>
<p>An example of graph file is shown below snippet. It should be saved a text file (.txt)
The first line of the should contain the below listed headers/column names in the same order:</p>
<ol>
 <li> Map = the marker position </li>
 <li> Group = Linkage group or chromosome </li>
 <li> LOD = LOD scores of the markers from QTL scan </li>
 <li> Locus = Marker names </li>
</ol>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">Map</span>	<span class="nt">Group</span>	<span class="nt">LOD</span>	<span class="nt">Locus</span>
<span class="nt">0</span>	<span class="nt">3</span>	<span class="nt">0</span><span class="nc">.338142225</span>	<span class="nt">3_271381</span>
<span class="nt">0</span>	<span class="nt">3</span>	<span class="nt">0</span><span class="nc">.338142225</span>	<span class="nt">3_342741</span>
<span class="nt">3</span><span class="nc">.016</span>	<span class="nt">3</span>	<span class="nt">0</span><span class="nc">.342828507</span>	<span class="nt">3_441478</span>
<span class="nt">3</span><span class="nc">.016</span>	<span class="nt">3</span>	<span class="nt">0</span><span class="nc">.342828507</span>	<span class="nt">3_1842464</span>
<span class="nt">8</span><span class="nc">.692</span>	<span class="nt">3</span>	<span class="nt">0</span><span class="nc">.995532085</span>	<span class="nt">3_609816</span>
<span class="nt">8</span><span class="nc">.692</span>	<span class="nt">3</span>	<span class="nt">0</span><span class="nc">.995532088</span>	<span class="nt">3_3385014</span>
<span class="nt">8</span><span class="nc">.692</span>	<span class="nt">3</span>	<span class="nt">0</span><span class="nc">.99554481</span>	<span class="nt">3_3633235</span>
<span class="nt">8</span><span class="nc">.692</span>	<span class="nt">3</span>	<span class="nt">0</span><span class="nc">.995559978</span>	<span class="nt">3_3781609</span>
<span class="nt">8</span><span class="nc">.692</span>	<span class="nt">3</span>	<span class="nt">0</span><span class="nc">.995559979</span>	<span class="nt">3_2314233</span>
<span class="nt">13</span><span class="nc">.825</span>	<span class="nt">3</span>	<span class="nt">1</span><span class="nc">.667949557</span>	<span class="nt">3_3143022</span>
<span class="nt">15</span><span class="nc">.815</span>	<span class="nt">3</span>	<span class="nt">2</span><span class="nc">.051705308</span>	<span class="nt">3_3905978</span>
<span class="nt">15</span><span class="nc">.815</span>	<span class="nt">3</span>	<span class="nt">2</span><span class="nc">.051705309</span>	<span class="nt">3_3488939</span>
<span class="nt">20</span><span class="nc">.948</span>	<span class="nt">3</span>	<span class="nt">2</span><span class="nc">.435239204</span>	<span class="nt">3_4019281</span>
<span class="nt">20</span><span class="nc">.948</span>	<span class="nt">3</span>	<span class="nt">2</span><span class="nc">.435239205</span>	<span class="nt">3_4088612</span>
<span class="nt">21</span><span class="nc">.933</span>	<span class="nt">3</span>	<span class="nt">3</span><span class="nc">.525018239</span>	<span class="nt">3_4315306</span>
<span class="nt">21</span><span class="nc">.933</span>	<span class="nt">3</span>	<span class="nt">3</span><span class="nc">.525018244</span>	<span class="nt">3_4565569</span>
<span class="nt">21</span><span class="nc">.933</span>	<span class="nt">3</span>	<span class="nt">3</span><span class="nc">.525018244</span>	<span class="nt">3_4822693</span>
<span class="nt">27</span><span class="nc">.609</span>	<span class="nt">3</span>	<span class="nt">4</span><span class="nc">.450683912</span>	<span class="nt">3_5155501</span>
<span class="nt">27</span><span class="nc">.609</span>	<span class="nt">3</span>	<span class="nt">4</span><span class="nc">.450683912</span>	<span class="nt">3_5232850</span>
<span class="nt">27</span><span class="nc">.609</span>	<span class="nt">3</span>	<span class="nt">4</span><span class="nc">.450683917</span>	<span class="nt">3_5507072</span>
<span class="nt">30</span><span class="nc">.625</span>	<span class="nt">3</span>	<span class="nt">5</span><span class="nc">.838195827</span>	<span class="nt">3_5583374</span>
<span class="nt">30</span><span class="nc">.625</span>	<span class="nt">3</span>	<span class="nt">5</span><span class="nc">.83819583</span>	<span class="nt">3_5699986</span>
<span class="nt">30</span><span class="nc">.625</span>	<span class="nt">3</span>	<span class="nt">5</span><span class="nc">.838219391</span>	<span class="nt">3_5797319</span>
<span class="nt">30</span><span class="nc">.625</span>	<span class="nt">3</span>	<span class="nt">6</span><span class="nc">.158922578</span>	<span class="nt">3_6000617</span>
<span class="nt">30</span><span class="nc">.625</span>	<span class="nt">3</span>	<span class="nt">6</span><span class="nc">.158930443</span>	<span class="nt">3_6426810</span>
<span class="nt">30</span><span class="nc">.625</span>	<span class="nt">3</span>	<span class="nt">6</span><span class="nc">.158983621</span>	<span class="nt">3_6986623</span>
<span class="nt">30</span><span class="nc">.625</span>	<span class="nt">3</span>	<span class="nt">6</span><span class="nc">.158983624</span>	<span class="nt">3_6650857</span>
<span class="nt">33</span><span class="nc">.126</span>	<span class="nt">3</span>	<span class="nt">5</span><span class="nc">.816798097</span>	<span class="nt">3_7155917</span>
<span class="nt">33</span><span class="nc">.126</span>	<span class="nt">3</span>	<span class="nt">5</span><span class="nc">.816798097</span>	<span class="nt">3_7220808</span>
<span class="nt">33</span><span class="nc">.616</span>	<span class="nt">3</span>	<span class="nt">6</span><span class="nc">.087780718</span>	<span class="nt">3_7472345</span>
<span class="nt">36</span><span class="nc">.632</span>	<span class="nt">3</span>	<span class="nt">7</span><span class="nc">.120904543</span>	<span class="nt">3_7742797</span>
<span class="nt">40</span><span class="nc">.695</span>	<span class="nt">3</span>	<span class="nt">7</span><span class="nc">.595581176</span>	<span class="nt">3_8256808</span>
<span class="nt">40</span><span class="nc">.695</span>	<span class="nt">3</span>	<span class="nt">7</span><span class="nc">.595581176</span>	<span class="nt">3_8738055</span>
<span class="nt">40</span><span class="nc">.695</span>	<span class="nt">3</span>	<span class="nt">7</span><span class="nc">.595581176</span>	<span class="nt">3_8604250</span>
<span class="nt">40</span><span class="nc">.695</span>	<span class="nt">3</span>	<span class="nt">7</span><span class="nc">.595581178</span>	<span class="nt">3_9374964</span>
<span class="nt">45</span><span class="nc">.29</span>	<span class="nt">3</span>	<span class="nt">9</span><span class="nc">.327503718</span>	<span class="nt">3_11252155</span>
<span class="nt">45</span><span class="nc">.29</span>	<span class="nt">3</span>	<span class="nt">9</span><span class="nc">.327503722</span>	<span class="nt">3_14850509</span>
<span class="nt">48</span><span class="nc">.827</span>	<span class="nt">3</span>	<span class="nt">11</span><span class="nc">.41099851</span>	<span class="nt">3_15846197</span>
<span class="nt">48</span><span class="nc">.827</span>	<span class="nt">3</span>	<span class="nt">11</span><span class="nc">.41099851</span>	<span class="nt">3_17712785</span>
<span class="nt">48</span><span class="nc">.827</span>	<span class="nt">3</span>	<span class="nt">11</span><span class="nc">.41099851</span>	<span class="nt">3_17950996</span>
<span class="nt">50</span><span class="nc">.312</span>	<span class="nt">3</span>	<span class="nt">10</span><span class="nc">.17917069</span>	<span class="nt">3_19297395</span>
<span class="nt">50</span><span class="nc">.312</span>	<span class="nt">3</span>	<span class="nt">10</span><span class="nc">.17917069</span>	<span class="nt">3_19690734</span>
</code></pre></div></div>

<h4 id="22-mapchart-file-mct">2.2 MapChart file (*.mct)</h4>
<p>An example file of mapchart file is shown in snippet below.</p>

<p>In this file, one can indicate the most significant marker and QTL intervals. For example, in the below snippet, notice that under group 3, I have added t=<code class="language-plaintext highlighter-rouge">***</code> by marker <strong>3_17950996</strong> to highlight the significant marker, similarly, added <strong>b</strong> by markers <strong>3_14850509</strong> and <strong>3_19690734</strong> to indicate the qtl intervals.</p>

<p>Further, please read the <strong>notes</strong> (lines beginning with <code class="language-plaintext highlighter-rouge">**</code>;<code class="language-plaintext highlighter-rouge">**</code>) in the snippet below to learn more about how one add x- and y-axis scale, draw line for LOD threshold and position of candidate gene/s.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">group</span> <span class="nt">3</span>
<span class="nt">3_271381</span>	<span class="nt">0</span>	
<span class="nt">3_342741</span>	<span class="nt">0</span>	
<span class="nt">3_441478</span>	<span class="nt">3</span><span class="nc">.016</span>	
<span class="nt">3_1842464</span>	<span class="nt">3</span><span class="nc">.016</span>	
<span class="nt">3_609816</span>	<span class="nt">8</span><span class="nc">.692</span>	
<span class="nt">3_3385014</span>	<span class="nt">8</span><span class="nc">.692</span>	
<span class="nt">3_3633235</span>	<span class="nt">8</span><span class="nc">.692</span>	
<span class="nt">3_3781609</span>	<span class="nt">8</span><span class="nc">.692</span>	
<span class="nt">3_2314233</span>	<span class="nt">8</span><span class="nc">.692</span>	
<span class="nt">3_3143022</span>	<span class="nt">13</span><span class="nc">.825</span>	
<span class="nt">3_3905978</span>	<span class="nt">15</span><span class="nc">.815</span>	
<span class="nt">3_3488939</span>	<span class="nt">15</span><span class="nc">.815</span>	
<span class="nt">3_4019281</span>	<span class="nt">20</span><span class="nc">.948</span>	
<span class="nt">3_4088612</span>	<span class="nt">20</span><span class="nc">.948</span>	
<span class="nt">3_4315306</span>	<span class="nt">21</span><span class="nc">.933</span>	
<span class="nt">3_4565569</span>	<span class="nt">21</span><span class="nc">.933</span>	
<span class="nt">3_4822693</span>	<span class="nt">21</span><span class="nc">.933</span>	
<span class="nt">3_5155501</span>	<span class="nt">27</span><span class="nc">.609</span>	
<span class="nt">3_5232850</span>	<span class="nt">27</span><span class="nc">.609</span>	
<span class="nt">3_5507072</span>	<span class="nt">27</span><span class="nc">.609</span>	
<span class="nt">3_5583374</span>	<span class="nt">30</span><span class="nc">.625</span>	
<span class="nt">3_5699986</span>	<span class="nt">30</span><span class="nc">.625</span>	
<span class="nt">3_5797319</span>	<span class="nt">30</span><span class="nc">.625</span>	
<span class="nt">3_6000617</span>	<span class="nt">30</span><span class="nc">.625</span>	
<span class="nt">3_6426810</span>	<span class="nt">30</span><span class="nc">.625</span>	
<span class="nt">3_6986623</span>	<span class="nt">30</span><span class="nc">.625</span>	
<span class="nt">3_6650857</span>	<span class="nt">30</span><span class="nc">.625</span>	
<span class="nt">3_7155917</span>	<span class="nt">33</span><span class="nc">.126</span>	
<span class="nt">3_7220808</span>	<span class="nt">33</span><span class="nc">.126</span>	
<span class="nt">3_7472345</span>	<span class="nt">33</span><span class="nc">.616</span>	
<span class="nt">3_7742797</span>	<span class="nt">36</span><span class="nc">.632</span>	
<span class="nt">3_8256808</span>	<span class="nt">40</span><span class="nc">.695</span>	
<span class="nt">3_8738055</span>	<span class="nt">40</span><span class="nc">.695</span>	
<span class="nt">3_8604250</span>	<span class="nt">40</span><span class="nc">.695</span>	
<span class="nt">3_9374964</span>	<span class="nt">40</span><span class="nc">.695</span>	
<span class="nt">3_11252155</span>	<span class="nt">45</span><span class="nc">.29</span>	
<span class="nt">3_14850509</span>	<span class="nt">45</span><span class="nc">.29</span>	<span class="nt">b</span>
<span class="nt">3_15846197</span>	<span class="nt">48</span><span class="nc">.827</span>	
<span class="nt">3_17712785</span>	<span class="nt">48</span><span class="nc">.827</span>	
<span class="nt">3_17950996</span>	<span class="nt">48</span><span class="nc">.827</span>	<span class="nt">t</span><span class="o">=***</span> <span class="nt">c2</span>
<span class="nt">3_19297395</span>	<span class="nt">50</span><span class="nc">.312</span>	
<span class="nt">3_19690734</span>	<span class="nt">50</span><span class="nc">.312</span>	<span class="nt">b</span>



<span class="nt">qtls</span> <span class="p">;</span> <span class="nt">QTLs</span> <span class="nt">section</span> <span class="nt">of</span> <span class="nt">group</span> <span class="nt">3</span>
<span class="nt">Anthocyanin-acyltransferases</span> <span class="nt">auto</span> <span class="nt">1</span> <span class="nt">2</span>  <span class="nt">I</span> <span class="nt">C3</span>
     <span class="p">;</span><span class="nt">qtl</span> <span class="nt">Anthocyanin-acyltransferases</span> <span class="nt">is</span> <span class="nt">calculated</span> <span class="o">(</span><span class="s2">"auto"</span><span class="o">)</span> <span class="nt">from</span> <span class="nt">graph</span> <span class="nt">Anthocyanin-acyltransferases</span> <span class="o">(</span><span class="nt">see</span> <span class="nt">below</span><span class="o">),</span> 
     <span class="p">;</span><span class="nt">with</span> <span class="nt">1-LOD</span> <span class="nt">and</span> <span class="nt">2-LOD</span> <span class="nt">thresholds</span>
     <span class="p">;</span><span class="nt">it</span> <span class="nt">is</span> <span class="nt">shown</span> <span class="nt">in</span> <span class="nt">color</span> <span class="nt">3</span> <span class="o">(</span><span class="nt">C3</span><span class="o">,</span> <span class="nt">green</span><span class="o">)</span>
     <span class="p">;</span><span class="nt">with</span> <span class="nt">the</span> <span class="nt">default</span> <span class="nt">fillstyle</span> <span class="o">(</span><span class="nt">F1</span><span class="o">,</span> <span class="nt">solid</span><span class="o">)</span>
     <span class="p">;</span><span class="nt">and</span> <span class="nt">its</span> <span class="nt">name</span> <span class="nt">is</span> <span class="nt">printed</span> <span class="nt">in</span> <span class="nt">italics</span> <span class="o">(</span><span class="nt">I</span><span class="o">)</span>

<span class="nt">graphs</span> <span class="nt">S</span><span class="o">=</span><span class="nt">5</span> <span class="nt">H</span><span class="o">=</span><span class="nt">15</span>
<span class="p">;</span> <span class="na">Graphs</span><span class="err"> </span><span class="na">section</span><span class="err"> </span><span class="na">of</span><span class="err"> </span><span class="na">group</span><span class="err"> </span><span class="na">A</span><span class="err">, </span><span class="na">with</span><span class="err"> </span><span class="na">formatting</span><span class="err"> </span><span class="na">of</span><span class="err"> </span><span class="na">Y-axis</span><span class="p">:</span>
<span class="p">;</span> <span class="nt">Step</span> <span class="o">(</span><span class="nt">tick</span> <span class="nt">interval</span><span class="o">)</span> <span class="nt">on</span> <span class="nt">Y-axis</span> <span class="nt">is</span> <span class="nt">5</span> <span class="o">(</span><span class="nt">S</span><span class="o">=</span><span class="nt">5</span><span class="p">;</span> <span class="nt">would</span> <span class="nt">be</span> <span class="nt">10</span> <span class="nt">if</span> <span class="nt">not</span> <span class="nt">specified</span><span class="o">)</span>
<span class="p">;</span> <span class="nt">High</span> <span class="o">(</span><span class="nt">upper</span><span class="o">)</span> <span class="nt">limit</span> <span class="nt">of</span> <span class="nt">Y-axis</span> <span class="o">=</span> <span class="nt">15</span> <span class="o">(</span><span class="nt">H</span><span class="o">=</span><span class="nt">15</span><span class="p">;</span> <span class="nt">would</span> <span class="nt">be</span> <span class="nt">30</span> <span class="nt">if</span> <span class="nt">not</span> <span class="nt">specified</span><span class="o">)</span>

<span class="nt">const</span> <span class="nt">3</span><span class="nc">.49</span> <span class="nt">L3</span>
     <span class="p">;</span><span class="nt">shows</span> <span class="nt">a</span> <span class="nt">constant</span> <span class="nt">line</span> <span class="o">(</span><span class="nt">the</span> <span class="nt">LOD</span> <span class="nt">threshold</span> <span class="nt">of</span> <span class="nt">3</span><span class="nc">.49</span><span class="o">)</span>
     <span class="p">;</span><span class="nt">it</span> <span class="nt">is</span> <span class="nt">shown</span> <span class="nt">with</span> <span class="nt">linestyle</span> <span class="nt">L3</span> <span class="o">(</span><span class="nt">dotted</span><span class="o">)</span>
     <span class="p">;</span><span class="nt">and</span> <span class="nt">does</span> <span class="nt">not</span> <span class="nt">appear</span> <span class="nt">in</span> <span class="nt">the</span> <span class="nt">legend</span><span class="o">,</span> <span class="nt">because</span> <span class="nt">it</span> <span class="nt">is</span> <span class="nt">a</span> <span class="nt">constant</span>

<span class="nt">Anthocyanin-acyltransferases</span> <span class="nt">graphFile_chr3</span><span class="nc">.txt</span>  <span class="nt">I</span> <span class="nt">C3</span> <span class="nt">S2</span> <span class="nt">L5</span>
     <span class="p">;</span><span class="nt">graph</span> <span class="nt">Anthocyanin-acyltransferases</span> <span class="nt">is</span> <span class="nt">read</span> <span class="nt">from</span> <span class="nt">file</span> <span class="nt">graphFile_chr3</span><span class="nc">.txt</span> <span class="o">(</span><span class="nt">lines</span> <span class="nt">with</span> <span class="nt">Group</span> <span class="nt">3</span><span class="o">)</span>
     <span class="p">;</span><span class="nt">it</span> <span class="nt">is</span> <span class="nt">shown</span> <span class="nt">in</span> <span class="nt">color</span> <span class="nt">C3</span> <span class="o">(</span><span class="nt">green</span><span class="o">)</span>
     <span class="p">;</span><span class="nt">and</span> <span class="nt">in</span> <span class="nt">the</span> <span class="nt">legend</span> <span class="nt">its</span> <span class="nt">name</span> <span class="nt">is</span> <span class="nt">printed</span> <span class="nt">in</span> <span class="nt">italics</span> <span class="o">(</span><span class="nt">I</span><span class="o">)</span>
     <span class="p">;</span><span class="nt">it</span> <span class="nt">is</span> <span class="nt">shown</span> <span class="nt">with</span> <span class="nt">linestyle</span> <span class="nt">L5</span> <span class="o">(</span><span class="nt">dash-dot-dot</span><span class="o">)</span>
     <span class="p">;</span><span class="nt">and</span> <span class="nt">with</span> <span class="nt">symbol</span> <span class="nt">style</span> <span class="nt">S2</span> <span class="o">(</span><span class="nt">solid</span> <span class="nt">circle</span><span class="o">)</span>
</code></pre></div></div>
<hr />
<h3 id="follow-the-below-steps-to-open-and-run-the-above-files-in-mapchart">Follow the below steps to open and run the above files in MapChart</h3>
<p align="center"><img src="/images/biostat/mapchart/mapchart5.gif" alt="run mapchart" /></p>

<hr />
<h3 id="output">Output</h3>
<p>The generated plot can be copied and pasted into any other platforms such as MS Word/Powerpoint and saved.</p>
<p align="center">
<img src="/images/biostat/mapchart/qtlplot.webp" alt="QTL map plot" />
</p>

<hr />

<p><strong>Thank you</strong> for reading this tutorial. If you have any questions or comments, please let me know in the comment section below or send me an email.</p>

<p>Happy plott-ing :smiley:</p>
<hr />

<p><b> Bibliography </b></p>
<ol>
<li>
<p> Voorrips, R. E. <cite>"MapChart: software for the graphical presentation of linkage maps and QTLs."</cite> Journal of heredity 93.1 (2002): 77-78.</p>
</li>
</ol>]]></content><author><name>M. Shamshad</name><email>shamshad.rattan@gmail.com</email></author><category term="QTL" /><category term="maps," /><category term="molecular" /><category term="Analysis" /><category term="MapChart" /><category term="Linkage Mapping" /><category term="QTLs maps" /><summary type="html"><![CDATA[MapChart is a free software to plot publishing quality genetic linkage maps as well as QTLs. This software was developed at Wageningen University by Roeland E. Voorrips and can be downloaded at this link .]]></summary></entry><entry><title type="html">Online submission of a scientific paper, a guideline for beginners</title><link href="http://localhost:4000/posts/2020/09/scientific-paper/" rel="alternate" type="text/html" title="Online submission of a scientific paper, a guideline for beginners" /><published>2020-09-04T00:00:00+05:30</published><updated>2024-10-06T20:53:46+05:30</updated><id>http://localhost:4000/posts/2020/09/scientific-paper</id><content type="html" xml:base="http://localhost:4000/posts/2020/09/scientific-paper/"><![CDATA[<p>There exist some definite gaps “from performing of an experiment to the formulation of a hypothesis”. It is not necessary that a person good at lab work must be an expert in scientific writing too.
<!--more-->
Besides writing a paper, incomplete knowledge about paper submission and fear of its rejection are the major hurdles in publication. This article is, therefore, an attempt to emphasize some ground facts about academic writing and guide for those students (beginners) who are afraid of correspondence.
<!--more-->
Writing a paper does not mean necessarily you have to collect a very large quantity of data or write complex scientific sentences constituting many formal words. Instead, you just need to be natural and focused on your topic. Either you are planning to write a review paper, an opinion, a short communication, or a research paper, the paper submission process is almost the same for every type of paper (with some minor differences). I am trying here to explain a brief and simple systematic procedure for paper submission, which might be helpful for novices.
<!--more--></p>
<h2 id="1-the-selection-of-a-journal">1. The selection of a journal</h2>
<p>First for more important step is to search for a suitable scientific journal for your article. The paper submission is not a default process, that is, you write a paper and submit it anywhere, but before writing it is a selective method with many specifications. Hence, one should be precise in selecting a journal. The best way to find a suitable journal is using the online journal finder tools/websites, where you just need to paste the title and abstract (of a manuscript) in the respective search column and the journal finder will provide you a list of relevant journals (along with the percentage of acceptance probability).</p>
<h2 id="2-registration-or-creating-a-journal-account">2. Registration or creating a journal account</h2>
<p>Once you selected an appropriate journal, directly open the primary webpage of that journal, instead of approaching it through a third channel (it might waste your time). Now you need to be registered with the selected journal, but before being registered, read the “journal’s aims and scope” carefully to cross-check the relevancy of the journal with paper under consideration.</p>
<h2 id="3-preparation-of-manuscript">3. Preparation of manuscript</h2>
<p>Scientific papers typically have two audiences: first, the referees, who help the journal editor decide whether a paper is suitable for publication; and second, the journal readers themselves, who may be more or less knowledgeable about the topic addressed in the paper. To be accepted by referees and cited by readers, papers must do more than simply present a chronological account of the research work. Rather, they must convince their audience that the research presented is important, valid, and relevant to other scientists in the same field. To this end, they must emphasize both the motivation for the work and the outcome of it, and they must include just enough evidence to establish the validity of this outcome.
Papers that report experimental work are often structured chronologically in five sections: first, Introduction; then Materials and Methods, Results, and Discussion (together, these three sections make up the paper’s body); and finally, Conclusion.</p>
<ul>
  <li>The Introduction section clarifies the motivation for the work presented and prepares readers for the structure of the paper.</li>
  <li>The Materials and Methods section provides sufficient detail for other scientists to reproduce the experiments presented in the paper. In some journals, this information is placed in an appendix, because it is not what most readers want to know first.</li>
  <li>The Results and Discussion sections present and discuss the research results, respectively. They are often usefully combined into one section, however, because readers can seldom make sense of results alone without accompanying interpretation — they need to be told what the results mean.</li>
  <li>The Conclusion section presents the outcome of the work by interpreting the findings at a higher level of abstraction than the Discussion and by relating these findings to the motivation stated in the Introduction.</li>
</ul>

<p>Read the author’s instruction page thoroughly, and format the manuscript as per the given guidelines. I believe this is the most important and time taking step. The editor, who first receives your paper, has complete authority to reject if you submit a poorly formatted article (especially the wrong citation style). I prefer to use <a href="https://www.zotero.org/">Zotero reference manger</a> for putting references in articles because this tool is convenient and quick. Simply import the journal’s <code class="language-plaintext highlighter-rouge">CSL</code> style from the reference section (given in the author’s guidelines) and update the citation style in the MS word file of the manuscript. Furthermore, prepare the supplementary files, figures, tables, etc according to the given criteria. Some journals need a “whole document submission” (all files included), while the majority require submission in form of separate files (of figures, tables, and script). So, prepare the files accordingly.</p>

<h2 id="4-writing-a-cover-letter-to-the-editor">4. Writing a cover letter to the editor</h2>
<p>Congrats! You have prepared your manuscript in the light of given instruction; you are almost done with 75% of your task. Now write an outstanding covering letter to the journal’s editor, which answer the following questions:
<!--more--></p>
<ul>
  <li>What is your submission about?</li>
  <li>Why the journal should consider your submission?</li>
  <li>What type of readers your paper will attract?</li>
  <li>What is significant or novel in your study?</li>
</ul>

<p>A cover letter should be brief and constitute two or three paragraphs. The letter must include the details of the corresponding author.</p>
<h2 id="5-final-submission">5. Final submission</h2>
<p>Good job! You are now ready to go for the final submission.
<!--more-->
Submit your prepared manuscript files in the respective journal. Almost all the journals have a very easy channel of paper submission and you can easily upload the files in the required sections. For instance, the Wiley online publishing group, all their journals have a very smooth pattern of submission, first, you upload title and abstract, secondly, the files (main document and supplementary), then authors list, followed by the reviewer’s recommendations and finally review and submit the manuscript. Being a student, you may find it difficult to recommend the reviewers yourself. I would suggest that consult your instructor, lab in charge, or supervisor for this purpose, they can better assign the reviewers (as per the institution’s policies). However, it is not compulsory that the editor will consider your suggested reviewers, these criteria vary from journal to journal.
<!--more-->
The journal editor will send you a submission confirmation email, shortly after you submit the article. The editor evaluates your paper based on specific criteria (such as the novelty of work, methodology, results, statistics, figure quality, formatting, etc.). The submission then passed on to reviewers (two or three reviewers) and you will be notified by an email once your paper considered for review. The reviewers responded back to editors by giving their positive or negative remarks and all these evaluations together contribute to making the final decision on your manuscript. The whole procedure may take 2-3 months or more. It depends on the different strategies of each journal/publishing group.</p>]]></content><author><name>M. Shamshad</name><email>shamshad.rattan@gmail.com</email></author><category term="scientific" /><category term="writing" /><category term="Research Journal" /><category term="Rough Draft" /><category term="Cover letter" /><summary type="html"><![CDATA[There exist some definite gaps “from performing of an experiment to the formulation of a hypothesis”. It is not necessary that a person good at lab work must be an expert in scientific writing too.]]></summary></entry><entry><title type="html">Add non-whitelisted plugins and Mermaid</title><link href="http://localhost:4000/posts/2020/08/non-whitelisted-plugin-Mermaid/" rel="alternate" type="text/html" title="Add non-whitelisted plugins and Mermaid" /><published>2020-08-20T00:00:00+05:30</published><updated>2024-10-07T21:54:44+05:30</updated><id>http://localhost:4000/posts/2020/08/Non-whitelisted-plugin-Mermaid</id><content type="html" xml:base="http://localhost:4000/posts/2020/08/non-whitelisted-plugin-Mermaid/"><![CDATA[<p>GitHub Pages runs in <code class="language-plaintext highlighter-rouge">safe</code> mode and only allows <a href="https://pages.github.com/versions/">a set of whitelisted plugins</a>. To use the gem in GitHub Pages, one of the workarounds is to use CI (e.g. travis, github workflow) and deploy to your <code class="language-plaintext highlighter-rouge">gh-pages</code> branch like: <a href="https://github.com/jeffreytse/jekyll-deploy-action">jekyll-deploy-action</a>, and I use this plugin: <a href="https://github.com/jeffreytse/jekyll-spaceship">jekyll-spaceship</a> in my github pages.
<!--more--></p>
<h2 id="using-mermaid-in-github-pages">Using mermaid in github pages</h2>

<p>Above <code class="language-plaintext highlighter-rouge">jekyll-spaceship</code> plugin can render the mermaid code but not very well as described <a href="https://github.com/jeffreytse/jekyll-spaceship/issues/60">here</a>.</p>

<p>Currently, there’re two better solutions by using the <a href="https://mermaid-js.github.io/mermaid/#/n00b-gettingStarted?id=_3-calling-the-javascript-api">mermaid javascript API</a>.</p>

<p>The <strong>first solution</strong> is to use the mermaid API directly, it’s inspired by this <a href="https://jojozhuang.github.io/tutorial/jekyll-diagram-with-mermaid/">post</a>. You can refer to this <a href="https://github.com/copdips/copdips.github.io/commit/6e9fde29abff7691ccfd7b7b0ad7158651931ed5">commit</a> to see how to use it. The steps are as follows:</p>

<ol>
  <li>create a file <code class="language-plaintext highlighter-rouge">mermaid.html</code> inside the folder <code class="language-plaintext highlighter-rouge">_includes</code>. The file content could be found on the <a href="https://mermaid-js.github.io/mermaid/#/n00b-gettingStarted?id=_3-calling-the-javascript-api">mermaid js official website</a>.</li>
  <li>update the file <code class="language-plaintext highlighter-rouge">_includes/head.html</code> to include the new file <code class="language-plaintext highlighter-rouge">mermaid.html</code> with or without the condition on the var <code class="language-plaintext highlighter-rouge">page.mermaid</code></li>
  <li>in post where we need to render the mermaid diagrams, just put the code in side a html pre block by set the class to <code class="language-plaintext highlighter-rouge">mermaid</code> like: <code class="language-plaintext highlighter-rouge">&lt;pre class="mermaid"&gt;&lt;/pre&gt;</code>. If the step 2 has set a condition on the var <code class="language-plaintext highlighter-rouge">page.mermaid</code>, you need to also add a variable named <code class="language-plaintext highlighter-rouge">mermaid</code> and set its value to <code class="language-plaintext highlighter-rouge">true</code> in the post header.</li>
</ol>

<p>The <strong>seconde solution</strong> is to install the gem plugin <a href="https://github.com/jasonbellamy/jekyll-mermaid">jekyll-mermaid</a> where the underlying implementation uses the mermaid API too, This is what I’m using as per this <a href="https://github.com/shamshadM/shamshadM.github.io/">commit</a> it’s a little bitter easier than the first solution.</p>

<hr />

<h1 id="use-of-mermaid-to-draw-different-types-of-diagram">Use of Mermaid to draw different Types of diagram</h1>
<hr />

<h2 id="flowchart">Flowchart</h2>

<p>All Flowcharts are composed of nodes, the geometric shapes and edges, the arrows or lines. The mermaid code defines the way that these nodes and edges are made and interact.</p>

<p>It can also accommodate different arrow types, multi directional arrows, and linking to and from subgraphs.</p>

<pre class="mermaid">
graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;
</pre>

<blockquote>
  <p>Another class of flow diagram</p>
</blockquote>
<pre class="mermaid">
flowchart TD
    A[Eid / Christmas / Dewali] --&gt;|Get money| B(Go shopping)
    B --&gt; C{Let me think}
    C --&gt;|One| D[Laptop]
    C --&gt;|Two| E[iPhone]
    C --&gt;|Three| F[fa:fa-car Car]
</pre>

<h2 id="pie-chart-diagrams">Pie chart Diagrams</h2>
<p>A pie chart (or a circle chart) is a circular statistical graphic, which is preided into slices to illustrate numerical proportion. In a pie chart, the arc length of each slice (and consequently its central angle and area), is proportional to the quantity it represents. While it is named for its resemblance to a pie which has been sliced, there are variations on the way it can be presented. The earliest known pie chart is generally credited to William Playfair’s Statistical Breviary of 1801 -Wikipedia</p>

<pre class="mermaid">
pie
    title Key elements in Product X
    "Calcium" : 42.96
    "Potassium" : 50.05
    "Magnesium" : 10.01
    "Iron" :  5
</pre>

<h2 id="sequence-diagram">Sequence Diagram</h2>
<p>A sequence diagram or system sequence diagram (SSD) shows process interactions arranged in time sequence in the field of software engineering. It depicts the processes involved and the sequence of messages exchanged between the processes needed to carry out the functionality. Sequence diagrams are typically associated with use case realizations in the 4+1 architectural view model of the system under development. Sequence diagrams are sometimes called event diagrams or event scenarios.</p>

<pre class="mermaid">
sequenceDiagram
      participant Alice
      participant Bob
      Alice-&gt;&gt;John: Hello John, how are you?
      loop Healthcheck
      John-&gt;&gt;John: Fight against hypochondria
      end
      Note right of John: Rational thoughts <br />prevail!
      John--&gt;&gt;Alice: Great!
      John-&gt;&gt;Bob: How about you?
      Bob--&gt;&gt;John: Jolly good!
</pre>

<h2 id="gantt-diagram">Gantt Diagram</h2>

<p>A Gantt chart is a type of bar chart that illustrates a project schedule. This chart lists the tasks to be performed on the vertical axis, and time intervals on the horizontal axis. The width of the horizontal bars in the graph shows the duration of each activity. Gantt charts illustrate the start and finish dates of the terminal elements and summary elements of a project. Terminal elements and summary elements constitute the work breakdown structure of the project. Modern Gantt charts also show the dependency (i.e., precedence network) relationships between activities. Gantt charts can be used to show current schedule status using percent-complete shadings and a vertical “TODAY” line.</p>

<pre class="mermaid">
gantt
    title A Gantt Diagram
    dateFormat  YYYY-MM-DD
    section Section
    First Task       :a1, 2018-07-01, 30d
    Another Task     :after a1, 20d
    section Another;
    Second Task      :2018-07-12, 12d
    Third Task       : 24d
</pre>

<h2 id="class-diagram">Class Diagram</h2>
<p>In software engineering, a <b>class diagram</b> in the Unified Modeling Language (UML) is a type of static structure diagram that describes the structure of a system by showing the system’s classes, their attributes, operations (or methods), and the relationships among objects.</p>

<p>The class diagram is the main building block of object-oriented modeling. It is used for general conceptual modeling of the structure of the application, and for detailed modeling, translating the models into programming code. Class diagrams can also be used for data modeling. The classes in a class diagram represent both the main elements, interactions in the application, and the classes to be programmed.</p>

<pre class="mermaid">
classDiagram
    Class01 &lt;|-- AveryLongClass : Cool
    Class03 *-- Class04
    Class05 o-- Class06
    Class07 .. Class08
    Class09 --&gt; C2 : Where am i?
    Class09 --* C3
    Class09 --|&gt; Class07
    Class07 : equals()
    Class07 : Object[] elementData
    Class01 : size()
    Class01 : int chimp
    Class01 : int gorilla
    Class08 &lt;--&gt; C2: Cool label
</pre>

<h2 id="git-graph">Git Graph</h2>
<p>The collection of all commits in a repository forms what in mathematics is called a graph: visually, a set of objects with lines drawn between some pairs of them. In Git, the lines represent the commit parent relationship previously explained, and this structure is called the “commit graph” of the repository</p>

<pre class="mermaid">
gitGraph
    commit
    commit
    branch develop
    checkout develop
    commit
    commit
    checkout main
    merge develop
    commit
    commit
</pre>

<h2 id="state-diagram">State Diagram</h2>
<p>A state diagram is a type of diagram used in computer science and related fields to describe the behavior of systems. State diagrams require that the system described is composed of a finite number of states; sometimes, this is indeed the case, while at other times this is a reasonable abstraction. Many forms of state diagrams exist, which differ slightly and have different semantics.</p>

<pre class="mermaid">
stateDiagram-v2
    [*] --&gt; Still
    Still --&gt; [*]
    Still --&gt; Moving
    Moving --&gt; Still
    Moving --&gt; Crash
    Crash --&gt; [*]
  </pre>

<h2 id="mindmap">Mindmap</h2>
<p>A mind map is a diagram used to visually organize information into a hierarchy, showing relationships among pieces of the whole. It is often created around a single concept, drawn as an image in the center of a blank page, to which associated representations of ideas such as images, words and parts of words are added. Major ideas are connected directly to the central concept, and other ideas branch out from those major ideas.</p>

<pre class="mermaid">
 mindmap
  root((mindmap))
    Origins
      Long history
      ::icon(fa fa-book)
      Popularization
        British popular psychology author Tony Buzan
    Research
      On effectiveness<br />and features
      On Automatic creation
        Uses
            Creative techniques
            Strategic planning
            Argument mapping
    Tools
      Pen and paper
      Mermaid
 </pre>
<h2 id="er-diagram">ER Diagram</h2>
<p>An entity–relationship model (or ER model) describes interrelated things of interest in a specific domain of knowledge. A basic ER model is composed of entity types (which classify the things of interest) and specifies relationships that can exist between entities (instances of those entity types). Wikipedia.</p>

<pre class="mermaid">
 erDiagram
          CUSTOMER }|..|{ DELIVERY-ADDRESS : has
          CUSTOMER ||--o{ ORDER : places
          CUSTOMER ||--o{ INVOICE : "liable for"
          DELIVERY-ADDRESS ||--o{ ORDER : receives
          INVOICE ||--|{ ORDER : covers
          ORDER ||--|{ ORDER-ITEM : includes
          PRODUCT-CATEGORY ||--|{ PRODUCT : contains
          PRODUCT ||--o{ ORDER-ITEM : "ordered in"
 </pre>

<p>Mermaid is the best packages to draw the graphs, flowcharts, tables etc. You can find more about the mermaid on <a href="https://mermaid-js.github.io/mermaid/#/">Mermaid</a>
happy to see plugin mermaid :+1:!</p>]]></content><author><name>M. Shamshad</name><email>shamshad.rattan@gmail.com</email></author><category term="CI" /><category term="mermaid" /><category term="Mermaid" /><category term="graph" /><category term="non-whitelisted plugins" /><summary type="html"><![CDATA[GitHub Pages runs in safe mode and only allows a set of whitelisted plugins. To use the gem in GitHub Pages, one of the workarounds is to use CI (e.g. travis, github workflow) and deploy to your gh-pages branch like: jekyll-deploy-action, and I use this plugin: jekyll-spaceship in my github pages.]]></summary></entry><entry><title type="html">Adding Content to an Academic Website</title><link href="http://localhost:4000/posts/2020/08/website-content/" rel="alternate" type="text/html" title="Adding Content to an Academic Website" /><published>2020-08-07T00:00:00+05:30</published><updated>2024-10-09T21:30:54+05:30</updated><id>http://localhost:4000/posts/2020/08/website-content</id><content type="html" xml:base="http://localhost:4000/posts/2020/08/website-content/"><![CDATA[<p>One thing I haven’t covered in my previous posts on <a href="/posts/2020/06/academic-website/">creating</a> and <a href="/posts/2020/07/customizing-website/">customizing</a> an academic website is how to actually add content to your site. You know, the stuff that’s the reason why people go to your website in the first place? If you’ve followed those guides, your website should be professional looking and already feeling a little bit different from the stock template. However, adding new pages or tweaking the existing pages can be a little intimidating, and I realized I should probably walk through how to do so. Luckily Jekyll’s use of Markdown makes it really easy to add new content!</p>

<!--more-->

<h2 id="content">Content</h2>

<p>Editing the welcome page for your site (<code class="language-plaintext highlighter-rouge">_pages/about.md</code>) is relatively straightforward. Things get a little trickier if you want to build an entirely new page to your website. You’ll notice that I have a <a href="/software">software</a> page on my site that isn’t part of the <a href="https://academicpages.github.io/">academicpages</a> template. I’ll use that page as a running example to walk you through adding a new page to your site.</p>

<h2 id="first-steps">First steps</h2>

<p>First things first, we need to create a file for the page itself. The main pages for your website are generated from <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a> files contained in the <code class="language-plaintext highlighter-rouge">_pages</code> directory. Create a new file called <code class="language-plaintext highlighter-rouge">software.md</code> in <code class="language-plaintext highlighter-rouge">_pages</code>. Now, open it up in RStudio or your text editor of choice. If you’ve looked at the <code class="language-plaintext highlighter-rouge">.md</code> files for other pages, you’ll notice that they all start with a similar block of text. This is a <a href="https://en.wikipedia.org/wiki/YAML">YAML</a> header that tells Jekyll the basic information needed to build the page. There are lots of different options you can include, but the only two you really need are the <code class="language-plaintext highlighter-rouge">permalink</code> for the page and its <code class="language-plaintext highlighter-rouge">title</code>. Add the following to the top of <code class="language-plaintext highlighter-rouge">software.md</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">permalink</span><span class="pi">:</span> <span class="s">/software/</span>
<span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Software"</span>
<span class="nn">---</span>
</code></pre></div></div>

<p>Anything after that second line of dashes will be translated into actual content on the page.</p>

<h2 id="fill-it-out">Fill it out</h2>

<p>Now we need to make our new page actually say something. My software page lists the R packages I’ve contributed to and includes links to miscellaneous other bits of code like functions for working with video data in Python or the LaTeX template I used for my dissertation. You can check out the <code class="language-plaintext highlighter-rouge">.md</code> source file for my software page on my <a href="https://raw.githubusercontent.com/jayrobwilliams/jayrobwilliams.github.io/master/_pages/software.md">GitHub</a>.</p>

<p>A couple of things to notice:</p>

<ul>
  <li>You can create headings using pound signs
    <ul>
      <li>More pound signs produce smaller headings</li>
    </ul>
  </li>
  <li>You can create links using standard Markdown syntax, e.g., <code class="language-plaintext highlighter-rouge">[link text](url)</code>
    <ul>
      <li>If you’re linking to a page generated from a source <code class="language-plaintext highlighter-rouge">.md</code> file in <code class="language-plaintext highlighter-rouge">_pages</code>, just put a slash before the page name and don’t include any extension, e.g., <code class="language-plaintext highlighter-rouge">[software](/software)</code></li>
    </ul>
  </li>
  <li>You can embed images by adding an exclamation point before the opening <code class="language-plaintext highlighter-rouge">[</code> in Markdown link syntax, e.g., <code class="language-plaintext highlighter-rouge">![](/images/profile.png)</code></li>
  <li>You can create code blocks like the ones on this page by enclosing text in triple backticks
    <ul>
      <li>Put the name of the programming language after the opening backticks to activate <a href="https://en.wikipedia.org/wiki/Syntax_highlighting">syntax highlighting</a></li>
    </ul>
  </li>
  <li>You can also embed raw HTML directly like I used to include three images next to one another</li>
</ul>

<p>These tools should be sufficient to let you build an awesome new page for your website. However, letting visitors actually get to your new page requires a little more work.</p>

<h2 id="you-cant-get-there-from-here">You can’t get there from here</h2>

<p>If you want to just add a link to your new page from an existing page, like the homepage, that’s easy and can be accomplished by adding a link to the Markdown source in <code class="language-plaintext highlighter-rouge">_pages/about.md</code>. That’s how I added my <a href="/teaching-materials">teaching materials</a> page; it’s just a link on my <a href="/teaching">teaching</a> page. But what about if you want your new page to be easily accessed from the fancy navigation bar at the top of the site?</p>

<p>To do that, we’ll need to edit the files Jekyll uses to control navigation on the site. Open up <code class="language-plaintext highlighter-rouge">_data/navigation.yml</code> and get ready to add our new page to the to menu. This is what it looks like in the template:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main links links</span>
<span class="na">main</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Publications"</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">/publications/</span>

  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Talks"</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">/talks/</span>    

  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Teaching"</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">/teaching/</span>    
    
  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Portfolio"</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">/portfolio/</span>
        
  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Blog</span><span class="nv"> </span><span class="s">Posts"</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">/year-archive/</span>
    
  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">CV"</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">/cv/</span>
    
  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Guide"</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">/markdown/</span>
</code></pre></div></div>

<p>The order that items appear in top-to-bottom in this file is also the order they’ll appear in left-to-right in the navigation bar. So decide where you want your new page to go, and slot it in. This is what <code class="language-plaintext highlighter-rouge">_data/navigation.yml</code> looks like for my website:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main links links</span>
<span class="na">main</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Publications"</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">/publications/</span>
    
  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Research"</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">/research/</span>

  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Teaching"</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">/teaching/</span>

  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Software"</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">/software/</span>

  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Posts"</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">/posts/</span>
    
  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">CV"</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">/cv/</span>
</code></pre></div></div>

<p>Again, you can check out the current version of this file for my site at my <a href="https://github.com/jayrobwilliams/jayrobwilliams.github.io/blob/master/_data/navigation.yml">GitHub</a> if you want. If I’ve changed anything in the navigation menu since I wrote this post, those changes will be reflected there.</p>

<p>You’ll also notice that the Guide link is no longer there in my <code class="language-plaintext highlighter-rouge">_data/navigation.yml</code>. Removing elements from this file drops them from the navigation menu, so if there are any other pages in the template you don’t plan to use, go ahead and remove them now.</p>

<p>Once you’re happy with your new page, it’s time to tell git about them, and then upload them to GitHub. You can do this with</p>

<div class="language-bash no-copy highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add _pages/software.md _data/navigation.yml
git commit <span class="nt">-m</span> <span class="s2">"add software page"</span>
git push
</code></pre></div></div>

<p>If you followed the guide on <a href="/posts/2020/06/academic-website/#uploading-changes-to-github">uploading changes to GitHub</a> in my post on <a href="/posts/2020/06/academic-website/">making an academic website</a>, all of the above code should run smoothly and in a few minutes you’ll have a new page on your website.</p>

<h1 id="uploading-files">Uploading files</h1>

<p>One of the advantages of using GitHub pages to host your website is that you don’t have to use Dropbox to host PDFs of your working papers and published articles, not to mention your CV. If you use Wix or WordPress, you may have to upload your files to Dropbox, and then link to them on your site. This process has three major downsides:</p>

<ol>
  <li>You have to update your website in two places to add or update a PDF</li>
  <li>Google Scholar will ignore Dropbox links, so you won’t get a record of your scholarship online</li>
  <li>If someone clicks a Dropbox while viewing your site on their phone or tablet, it may take them to the Dropbox app or pop up a message about the app not being installed</li>
</ol>

<p>All of these are less than ideal. Luckily, GitHub Pages has the capability to address all three already built in. When you make an update to your website and <code class="language-plaintext highlighter-rouge">git push</code> it to GitHub, <em>all</em> tracked files get uploaded with it. This means it’s super easy to upload your PDFs to your site and link directly to them. I’ll walk through how to do this with an example PDF called <code class="language-plaintext highlighter-rouge">working-paper.pdf</code>.</p>

<p>First, copy the PDF into the <code class="language-plaintext highlighter-rouge">files/pdf</code> directory in your site’s directory. Next we need to tell git about this file, which we do with</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add files/pdf/working-paper.pdf
git commit <span class="nt">-m</span> <span class="s2">"add working paper"</span>
git push
</code></pre></div></div>

<p>Don’t forget to add a link to the paper somewhere on your research page so that visitors can access it. Here’s an example of what that link might look like: <code class="language-plaintext highlighter-rouge">[Working Paper](/files/pdf/working-paper.pdf)</code>. And if you want to use the <a href="/posts/2020/07/customizing-website/#pushing-buttons">fancy button</a> from my post on <a href="/posts/2020/07/customizing-website/">customizing your site</a>, you would do this: <code class="language-plaintext highlighter-rouge">[Working Paper](/files/pdf/working-paper.pdf){: .btn--research}</code>.</p>

<h1 id="designing-for-mobile">Designing for mobile</h1>

<p>One of the advantages of the <a href="https://academicpages.github.io/">academicpages</a> template is that it is <a href="https://en.wikipedia.org/wiki/Responsive_web_design">responsive</a>, meaning that layouts change automatically with screen size to present content in the most efficient manner. Take a look at my website on your phone to see how a smaller device changes the site’s layout. When you’re editing your website, it’s a good idea to periodically check how it appears on a phone, as it’s likely that a number of visitors to your site will view it on their phones.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p>To do so, you can use tools like Chrome’s <a href="https://developers.google.com/web/tools/chrome-devtools/device-mode">device mode</a>, but this can be annoying and doesn’t perfectly capture the experience of navigating your site on a small touchscreen. The best way to do that is, unsurprisingly, to use your actual phone. However, this requires a slight tweak to our usual <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code> command. We need to add a <code class="language-plaintext highlighter-rouge">--host</code> argument to the command, where the value of the argument is our computer’s IP address. There are many ways to look this up, but here are two quick ones you can execute from the terminal:</p>

<ul>
  <li>On MacOS: <code class="language-plaintext highlighter-rouge">ifconfig en0 | grep inet | grep -v inet6 | awk '{print $2}'</code></li>
  <li>On Linux: <code class="language-plaintext highlighter-rouge">hostname -I</code></li>
</ul>

<p>What each of these will do is capture the <em>local</em> IP address of the computer. Often this will be something like <code class="language-plaintext highlighter-rouge">192.168.1.x</code> or <code class="language-plaintext highlighter-rouge">10.0.0.x</code>. This won’t let you access the site from outside your network over the internet, but it <em>will</em> let you access it locally on your own network. Once you’ve found your local IP address, you can serve your site on your local network, letting you view it on your phone or tablet. For example, my IP address is <code class="language-plaintext highlighter-rouge">192.168.1.6</code>, so putting it all together I get:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve <span class="nt">--host</span> 192.168.1.6
</code></pre></div></div>

<p>This is quite a lot to type, and your computer’s local IP address can change occasionally, so you can’t just keep putting in the same IP address each time. To save yourself some time by creating an <a href="https://en.wikipedia.org/wiki/Alias_(command)">alias</a> for the command. An alias is simply a way to refer to a longer command with a shorter label. To do this, you’ll need to edit your <code class="language-plaintext highlighter-rouge">.bash_profile</code> configuration file.<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> The easiest way to do this is to run</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano ~/.bash_profile
</code></pre></div></div>

<p>This will open up your <code class="language-plaintext highlighter-rouge">.bash_profile</code> in <a href="https://en.wikipedia.org/wiki/GNU_nano">nano</a>, a simple text editor.<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup> I’ve decided to call my aliased command <code class="language-plaintext highlighter-rouge">serve-site</code>, but you could call it anything you want. Scroll down to the end of the file and add either</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span>serve-site<span class="o">=</span><span class="s2">"bundle exec jekyll serve --host=</span><span class="si">$(</span>ifconfig en0 | <span class="nb">grep </span>inet | <span class="nb">grep</span> <span class="nt">-v</span> inet6 | <span class="nb">awk</span> <span class="s1">'{print $2}'</span><span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<p>for MacOS or</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span>serve-site<span class="o">=</span><span class="s2">"bundle exec jekyll serve --host=</span><span class="si">$(</span><span class="nb">hostname</span> <span class="nt">-I</span><span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<p>for Linux. Once you’ve added this line, save the file by pressing <kbd>ctrl</kbd>+<kbd>o</kbd> and then <kbd>enter</kbd> to use the existing filename, overwriting the old version of <code class="language-plaintext highlighter-rouge">.bash_profile</code>. Then press <kbd>ctrl</kbd>+<kbd>x</kbd> to close nano. The last step is to tell your terminal about this new alias. You can accomplish this with</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.bash_profile
</code></pre></div></div>

<p>regardless of whether you’re on Linux or MacOS. Now whenever you want to check out your website on a mobile device, you can just navigate to your website’s directory and use the new <code class="language-plaintext highlighter-rouge">serve-site</code> alias to launch it locally.</p>

<h2 id="windows">Windows</h2>

<p>If you’re trying to figure out how to do this on Windows, I haven’t forgotten about you, I just have no idea how to do this on Windows ¯\_(ツ)_/¯. My recommendation would be to do a lot of googling, or to install the <a href="https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux">Windows Subsystem for Linux</a>, which will allow you to use a bash shell to interact with your files.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>As a senior faculty member once pointed out to me, the search committee member who didn’t fully read your application is most likely to pull up your website on their phone during a committee meeting. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>I’m assuming that you’re using bash as your shell. If you’re using a different shell, see <a href="https://kb.iu.edu/d/abdy">this list</a> for which configuration files you should be editing. Other shells may also define aliases in different ways. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>Feel free to use a different editor or use the <code class="language-plaintext highlighter-rouge">edit</code> command if you’ve set the default editor to your preferred editor. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>M. Shamshad</name><email>shamshad.rattan@gmail.com</email></author><category term="website" /><category term="website" /><category term="git" /><category term="github" /><category term="bash" /><summary type="html"><![CDATA[One thing I haven’t covered in my previous posts on creating and customizing an academic website is how to actually add content to your site. You know, the stuff that’s the reason why people go to your website in the first place? If you’ve followed those guides, your website should be professional looking and already feeling a little bit different from the stock template. However, adding new pages or tweaking the existing pages can be a little intimidating, and I realized I should probably walk through how to do so. Luckily Jekyll’s use of Markdown makes it really easy to add new content!]]></summary></entry><entry><title type="html">Customizing an Academic Website</title><link href="http://localhost:4000/posts/2020/07/customizing-website/" rel="alternate" type="text/html" title="Customizing an Academic Website" /><published>2020-07-06T00:00:00+05:30</published><updated>2024-10-06T20:53:46+05:30</updated><id>http://localhost:4000/posts/2020/07/customizing-website</id><content type="html" xml:base="http://localhost:4000/posts/2020/07/customizing-website/"><![CDATA[<p>This is a followup to my previous post on <a href="/posts/2020/06/academic-website/">creating an academic website</a>. If you’ve followed that guide, you should have a website that’s professional-looking and informative, but it’s probably lacking <em>something</em> to really make it feel like your own. There are an infinite number of ways you could customize the <a href="https://academicpages.github.io/">academicpages template</a> (many of them far, far beyond my abilities) but I’m going to walk you through the process I used to start tweaking my website. The goal here isn’t to tell you how you should personalize your website, but to give you the tools to learn how to implement whatever changes you want to make.</p>

<!--more-->

<p>You’ll notice that the differences between my website and the template aren’t limited to my mug in the sidebar on the left. These differences are especially apparent if you compare my <a href="https://jayrobwilliams.com/publications/">publications</a> page with the <a href="https://academicpages.github.io/publications/">template’s</a>. You’ll notice on my page that article titles no longer link to separate pages and I’ve got fancy icons like <i class="fas fa-fw fa-file-pdf" aria-hidden="true"></i> to link to my PDF copy and <i class="fa fa-fw fa-link" aria-hidden="true"></i> to link to the version of record.</p>

<p>I’ve made several minor changes from the template to make my website feel a bit more like my own. These tweaks are varyingly difficult to accomplish, but they all involve a bit of trial and error. While academicpages is a great template, the accompanying documentation isn’t <em>particularly</em> useful if you want to make any changes that go beyond content into formatting. Thus, each new tweak I implement begins with something of a scavenger hunt.</p>

<p>Essentially, you need to track down where in the source code of your website a variable is originally defined, and then edit it there. Luckily, RStudio makes this relative straightforward with its Find in Files function. You can access this special search from the Edit menu, or by pressing <kbd>Cmd</kbd>+<kbd>Shift</kbd>+<kbd>c</kbd> on MacOS or <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>c</kbd> otherwise. Once you’ve brought up the Find in Files dialog, enter the name of the variable you’re looking for in the ‘Find’ box and your website’s directory in the ‘Search in’ box (for me that’s <code class="language-plaintext highlighter-rouge">~/Dropbox/Website</code>).</p>

<h1 id="easier-on-the-eyes">Easier on the eyes</h1>

<p>One thing I don’t like about the template’s settings out of the box is the font size in highlighted code blocks. It’s way too small! While small the small font size makes it more likely that an entire line of code will fit on a screen without having to scroll, how useful is that if you have to squint to see what’s there?</p>

<p>My first order of business in customizing my site was thus to increase the font size used in code blocks. I know that code highlighting functions are often referred to as syntax highlighters. Using this knowledge, I searched for “syntax” using the Find in Files dialog as seen below:</p>

<p><img src="/images/posts/customizing-website/findin-syntax.png" alt="" width="50%" class="align-center" /></p>

<p>The most relevant hit is a file called <code class="language-plaintext highlighter-rouge">_sass/syntax.scss</code>. The <code class="language-plaintext highlighter-rouge">_sass</code> directory is where you’ll find lots of options to change the appearance of your site since it contains the <a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets">CSS</a> code that determines much of how your site looks. If you scroll through <code class="language-plaintext highlighter-rouge">_sass/syntax.scss</code>, this chunk of code controls how text is rendered in code boxes:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.highlight <span class="o">{</span>
  margin: 0<span class="p">;</span>
  font-family: <span class="nv">$monospace</span><span class="p">;</span>
  font-size: <span class="nv">$type</span><span class="nt">-size-7</span><span class="p">;</span>
  line-height: 1.8<span class="p">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>We’ve found our next clue! We need to figure out where <code class="language-plaintext highlighter-rouge">$type-size-7</code> is defined. If you do a Find in Files search for that, you’ll learn it’s in <code class="language-plaintext highlighter-rouge">_sass/variables.scss</code>. Open that file and <kbd>Cmd</kbd>+<kbd>f</kbd> (<kbd>Ctrl</kbd>+<kbd>f</kbd> not on a Mac) for <code class="language-plaintext highlighter-rouge">$type-size-7</code>, and you’ll find this chunk of code:</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* type scale */</span>
<span class="nv">$type-size-1</span>                <span class="p">:</span> <span class="m">2</span><span class="mi">.441em</span><span class="p">;</span>  <span class="c1">// ~39.056px</span>
<span class="nv">$type-size-2</span>                <span class="p">:</span> <span class="m">1</span><span class="mi">.953em</span><span class="p">;</span>  <span class="c1">// ~31.248px</span>
<span class="nv">$type-size-3</span>                <span class="p">:</span> <span class="m">1</span><span class="mi">.563em</span><span class="p">;</span>  <span class="c1">// ~25.008px</span>
<span class="nv">$type-size-4</span>                <span class="p">:</span> <span class="m">1</span><span class="mi">.25em</span><span class="p">;</span>   <span class="c1">// ~20px</span>
<span class="nv">$type-size-5</span>                <span class="p">:</span> <span class="m">1em</span><span class="p">;</span>      <span class="c1">// ~16px</span>
<span class="nv">$type-size-6</span>                <span class="p">:</span> <span class="m">0</span><span class="mi">.75em</span><span class="p">;</span>   <span class="c1">// ~12px</span>
<span class="nv">$type-size-7</span>                <span class="p">:</span> <span class="m">0</span><span class="mi">.6875em</span><span class="p">;</span> <span class="c1">// ~11px</span>
<span class="nv">$type-size-8</span>                <span class="p">:</span> <span class="m">0</span><span class="mi">.625em</span><span class="p">;</span>  <span class="c1">// ~10px</span>
</code></pre></div></div>

<p>Here’s where font sizes are defined for the <em>entire</em> website! Luckily the code is well-commented, so we know that <code class="language-plaintext highlighter-rouge">$type-size-7</code> used in code blocks $\approx$ 11 pixels high. I first tried setting it to <code class="language-plaintext highlighter-rouge">$type-size-5</code>, but that was too big for my tastes. Alas <code class="language-plaintext highlighter-rouge">$type-size-6</code> was too small, and so I resolved to make my own.</p>

<p>The font sizes are defined in <a href="https://en.wikipedia.org/wiki/Em_(typography)">ems</a> (a unit of typography you’re no doubt familiar with if you’ve also spent too much time mucking about with LaTeX) so it’s easy to create a new one. <code class="language-plaintext highlighter-rouge">$type-size-6</code> is 0.75 ems and <code class="language-plaintext highlighter-rouge">$type-size-5</code> is 1 em, so to find the exact middle of them we can do</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="m">1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">.75</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 0.875
</code></pre></div></div>

<p>Now all we have to do is define our new font size in <code class="language-plaintext highlighter-rouge">_sass/variables.scss</code></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$type-size-syntax</span>           <span class="p">:</span> <span class="m">0</span><span class="mi">.875em</span><span class="p">;</span>  <span class="c1">// ~14px</span>
</code></pre></div></div>

<p>and tell the site to use it in <code class="language-plaintext highlighter-rouge">_sass/syntax.scss</code></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.highlight</span> <span class="p">{</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">font-family</span><span class="p">:</span> <span class="nv">$monospace</span><span class="p">;</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="nv">$type-size-syntax</span><span class="p">;</span>
  <span class="nl">line-height</span><span class="p">:</span> <span class="m">1</span><span class="mi">.8</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Save all these changes, restart your local webserver with <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code> (or wait for it to rebuild and reload if it was already running) and check out the changes. If everything went smoothly, you should have larger and easier to read text in any code blocks on your website.</p>

<h1 id="fixing-fancy-icons">Fixing fancy icons</h1>

<p>While you’re messing around in <code class="language-plaintext highlighter-rouge">_sass/syntax.scss</code>, there’s another easy fix that I highly recommend doing. The version of the template at the time I’m writing this has a small error in this file that prevents code boxes from rendering properly. You may be wondering why code boxes have a small square in the top right corner of them; I know I was. Take a look below for an example of this from my <a href="/software">software</a> page:</p>

<p><img src="/images/posts/customizing-website/box.png" alt="" /></p>

<p>It turns out there’s supposed to be a little ‘code’ icon there, like this <i class="fa fa-code" aria-hidden="true"></i>. I did some digging on Stack Overflow, and found <a href="https://stackoverflow.com/a/20782415/">this answer</a>, which told me that there’s an error with how <code class="language-plaintext highlighter-rouge">_sass/syntax.scss</code> references the <a href="https://fontawesome.com/">Font Awesome</a> library the icon comes from.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">&amp;</span><span class="nd">:before</span> <span class="p">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">right</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="mi">.5em</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="nv">$lighter-gray</span><span class="p">;</span>
  <span class="nl">content</span><span class="p">:</span> <span class="s2">"\f121"</span><span class="p">;</span>
  <span class="nl">font-family</span><span class="p">:</span> <span class="s2">"fontawesome"</span> <span class="o">!</span><span class="n">important</span><span class="p">;</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="nv">$type-size-6</span><span class="p">;</span>
  <span class="nl">line-height</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span>
  <span class="nl">text-transform</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">speak</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">font-family</code> line should be <code class="language-plaintext highlighter-rouge">font-family: "Font Awesome 5 Free" !important;</code>. Once you’ve made this change, the icon should show up.</p>

<p><img src="/images/posts/customizing-website/icon.png" alt="" /></p>

<p>I’ve submitted a <a href="https://github.com/academicpages/academicpages.github.io/pull/389">pull request</a> fixing the issue, so if you’re reading this in the future hopefully it’s been fixed in the template and you have no idea what I’m talking about.</p>

<h1 id="adding-some-color">Adding some color</h1>

<p>While we’re in <code class="language-plaintext highlighter-rouge">_sass/variables.scss</code>, there are a couple of other easy changes we can make. I never particularly liked the light blue that the template uses for links. There’s a section in <code class="language-plaintext highlighter-rouge">_sass/variables.scss</code> that controls what color links appear as.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* links */</span>
<span class="nv">$link-color</span>                 <span class="p">:</span> <span class="nv">$info-color</span><span class="p">;</span>
<span class="nv">$link-color-hover</span>           <span class="p">:</span> <span class="nf">mix</span><span class="p">(</span><span class="mh">#000</span><span class="o">,</span> <span class="nv">$link-color</span><span class="o">,</span> <span class="m">25%</span><span class="p">);</span>
<span class="nv">$link-color-visited</span>         <span class="p">:</span> <span class="nf">mix</span><span class="p">(</span><span class="mh">#fff</span><span class="o">,</span> <span class="nv">$link-color</span><span class="o">,</span> <span class="m">25%</span><span class="p">);</span>
<span class="nv">$masthead-link-color</span>        <span class="p">:</span> <span class="nv">$primary-color</span><span class="p">;</span>
<span class="nv">$masthead-link-color-hover</span>  <span class="p">:</span> <span class="nf">mix</span><span class="p">(</span><span class="mh">#000</span><span class="o">,</span> <span class="nv">$primary-color</span><span class="o">,</span> <span class="m">25%</span><span class="p">);</span>
</code></pre></div></div>

<p>Looking at this code, we can see that <code class="language-plaintext highlighter-rouge">$link-color</code> is defined as the same as <code class="language-plaintext highlighter-rouge">$info-color</code>. Further up, this is defined as</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$info-color</span>                 <span class="p">:</span> <span class="mh">#52adc8</span><span class="p">;</span>
</code></pre></div></div>

<p>You’ll notice that <code class="language-plaintext highlighter-rouge">$info-color</code> is defined with an alphanumeric string and not in a more familiar format like RGB. That’s because it’s a web color in <a href="https://en.wikipedia.org/wiki/Web_colors">hexadecimal format</a>. If you Google search <a href="https://www.google.com/search?q=color+picker">color picker</a> you’ll find a handy little applet where you can preview different hex colors or even convert from RGB to hex representation. Since I am a postdoc, I decided to just use my institution’s colors. If you change <code class="language-plaintext highlighter-rouge">$info-color</code> to any other color it will change the color of links across your website. Remember to wait for your webserver to reload the changes, otherwise you won’t be able to see them</p>

<h1 id="pushing-buttons">Pushing buttons</h1>

<p>The pages where I present my research highlight one of the other big changes I’ve made to my site. The buttons I use to link to papers and replication archives (see <a href="/research/measurement/#article">here</a> for an example) are not part of the template. I’d originally just used text links here, and thought using some buttons instead might liven up the page a bit. Unfortunately, the default buttons defined in the Academicpages template don’t fit super well given the other changes I’ve made.</p>

<p>The default button looks like <a href="#Buttons" class="btn">this </a>, which is fine, but doesn’t fit with a more colorful custom theme. My new themed button looks like <a href="#Buttons" class="btn--research">this</a>, which fits a little better and has less space around it.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p>While both buttons have a nice hover effect where they change color to let you know you’re over them, the second one incorporates the site’s accent color and is a bit more dynamic since the text changes color in addition to the background. Like most things CSS, buttons are defined in the <code class="language-plaintext highlighter-rouge">_sass</code> directory in <code class="language-plaintext highlighter-rouge">_sass/buttons.scss</code>.</p>

<p>There are lots of existing button types defined here, but we want to create our own. You can edit the default button styling in <code class="language-plaintext highlighter-rouge">_sass/buttons.scss</code>. If we redefine the existing base button class, we can end up with all kinds of weird side effects for other elements of the site, like the social media share buttons at the bottom of this post. To do this, we’ll define a new button <em>subclass</em>, which inherits the aspects of a button on the site but only uses the special behavior when we explicitly tell a button to do so.</p>

<p>After some time poking around the <a href="https://www.w3schools.com">W3Schools</a> page on <a href="https://www.w3schools.com/css/css3_buttons.asp">buttons</a>, and a lot of trial and error, I came up with the following CSS code:</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* research page buttons */</span>
<span class="k">&amp;</span><span class="nt">--research</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">inline-block</span><span class="p">;</span>
  <span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">0</span><span class="mi">.25em</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="mi">.125em</span> <span class="m">0</span><span class="mi">.25em</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="nv">$link-color</span><span class="p">;</span>
  <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">text-decoration</span><span class="p">:</span> <span class="nb">none</span> <span class="o">!</span><span class="n">important</span><span class="p">;</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span><span class="p">;</span>
  <span class="nl">border-color</span><span class="p">:</span> <span class="nv">$link-color</span><span class="p">;</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="nv">$border-radius</span><span class="p">;</span>
  <span class="nl">cursor</span><span class="p">:</span> <span class="nb">pointer</span><span class="p">;</span>

  <span class="k">&amp;</span><span class="nd">:hover</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="mh">#fff</span><span class="p">;</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nv">$link-color</span> <span class="o">!</span><span class="n">important</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>The key parts are</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">color: $link-color;</code>: use the site accent color for the text</li>
  <li><code class="language-plaintext highlighter-rouge">text-decoration: none !important;</code>: don’t underline the button text</li>
  <li><code class="language-plaintext highlighter-rouge">border: 1px solid;</code>: draw a one pixel border around the button</li>
  <li><code class="language-plaintext highlighter-rouge">border-color: $link-color;</code>: use the site accent color for the border</li>
  <li><code class="language-plaintext highlighter-rouge">border-radius: $border-radius;</code>: use a four pixel radius for the border (<code class="language-plaintext highlighter-rouge">$border-radius</code> is defined in <code class="language-plaintext highlighter-rouge">_sass/variables.scss</code>)</li>
</ul>

<p>To add a button to a page, you simply tack on <code class="language-plaintext highlighter-rouge">{: .btn--research}</code> after a link, like so</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nv">this</span><span class="p">](</span><span class="sx">#Buttons</span><span class="p">)</span>{: .btn--research}
</code></pre></div></div>

<h1 id="going-forward">Going forward</h1>

<p>This is just a brief overview of the ways you can tweak your website from the base provided by the template. Let Google and Stack Overflow be your guides. There will be some trial and error, but the beauty of git is that even if you break something it’s easy to roll back to changes to when everything was working.</p>

<p><img src="/images/posts/customizing-website/so.jpeg" alt="" width="50%" class="align-center" /></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>You’ll notice that this button is <em>very</em> similar to the ones that the <a href="https://academic-demo.netlify.app/#publications">Hugo Academic theme</a> uses. Just because I don’t like the theme as a whole doesn’t mean there aren’t really elegant parts of it. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>M. Shamshad</name><email>shamshad.rattan@gmail.com</email></author><category term="website" /><category term="website" /><category term="git" /><category term="github" /><summary type="html"><![CDATA[This is a followup to my previous post on creating an academic website. If you’ve followed that guide, you should have a website that’s professional-looking and informative, but it’s probably lacking something to really make it feel like your own. There are an infinite number of ways you could customize the academicpages template (many of them far, far beyond my abilities) but I’m going to walk you through the process I used to start tweaking my website. The goal here isn’t to tell you how you should personalize your website, but to give you the tools to learn how to implement whatever changes you want to make.]]></summary></entry><entry><title type="html">Building an Academic Website</title><link href="http://localhost:4000/posts/2020/06/academic-website/" rel="alternate" type="text/html" title="Building an Academic Website" /><published>2020-06-30T00:00:00+05:30</published><updated>2024-10-09T21:55:02+05:30</updated><id>http://localhost:4000/posts/2020/06/academic-website</id><content type="html" xml:base="http://localhost:4000/posts/2020/06/academic-website/"><![CDATA[<p>If you’re an academic, you need a website. Obviously I agree with this since you’re reading this on my website, but if you don’t have one, you should get one. Most universities these days provide a free option, usually powered by <a href="https://wordpress.org/">WordPress</a> (both <a href="https://sites.wustl.edu/">WashU</a> and <a href="https://web.unc.edu/">UNC</a> use WordPress for their respective offerings). While these sites are quick to set up and come with the prestige of a <code class="language-plaintext highlighter-rouge">.edu</code> URL, they have several drawbacks that have been <a href="https://townsendcenter.berkeley.edu/blog/personal-academic-webpages-how-tos-and-tips-better-site">extensively</a> <a href="https://martinlea.com/four-reasons-why-faculty-profile-pages-are-no-substitute-for-personal-academic-website/">written</a> <a href="https://theacademicdesigner.com/2019/personal-academic-website-benefits/">on</a>.
<!--more-->
If you’re a junior scholar, having your own personal webpage is even more important:</p>
<ul>
  <li>If (when) you move institutions, you’ll lose your website</li>
  <li>Even if you can export the contents of a WordPress site, there’s no guarantee it will seamlessly integrate with another university’s implementation</li>
  <li>Even worse, you’ll lose your search engine ranking since you’ll be starting over from square one with a new URL</li>
</ul>

<p>Even if you stay at the same institution for the rest of your career, you’re at the mercy of IT and your site may be taken down by a change to the hosting platform at some point in the future.</p>

<h1 id="my-approach">My approach</h1>

<p>There are plenty of guides out there on how to create a personal website using tools like WordPress, <a href="https://www.wix.com">Wix</a>, or <a href="https://www.sites.google.com/">Google Sites</a>. The free versions of these tools often come with ads, or at the least a message telling you which tool was used to create the website. I take a different approach that requires some (minimal) coding experience, but produces a beautiful and professional website that is ad free. I use a <a href="https://www.staticgen.com/about">static site generator</a> that produces HTML from easy to edit <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a> files. Because the resulting site is static (it’s just a collection of files with no interactivity where users can .e.g, fill out and submit forms) it can be hosted for free with <a href="https://pages.github.com/">GitHub Pages</a>. <a href="https://svmiller.com">Steven Miller</a> has a nice rundown on all of the <a href="https://svmiller.com/blog/2015/08/create-your-website-in-jekyll/#advantages">advantages</a> of this approach.</p>

<h2 id="who-this-guide-is-for">Who this guide is for</h2>

<p>This guide is intended for someone with a basic level of coding experience and comfort with Markdown files. Anyone who’s received graduate training in quantitative social science in the past few years should have all the necessary skills. I’m assuming some familiarity with using the <a href="https://en.wikipedia.org/wiki/Terminal_emulator">terminal</a>, but no experience with Git or GitHub is needed.</p>

<p>There are other guides to using static site generators to make academic websites, but they all assume a very high level of experience with the required tools and the ability to conduct extensive troubleshooting on your own. The template I use contains a 6 point checklist with no illustrations or examples. I’ve written this guide for people who have some experience coding, but don’t want to spend an afternoon learning two new languages on their own. If you know how to use R Markdown you have all the skills you need to build a website.</p>

<h2 id="conventions">Conventions</h2>

<p>In this tutorial, I use a couple of conventions to describe computer code and the actions you’ll do with it. Anytime you see content between two angle brackets, you should replace the content with the appropriate version for yourself. For example, &lt;yourusername&gt; would become jayrobwilliams for me, because that is my GitHub username. You’ll also frequently see</p>

<div class="language-plaintext no-copy highlighter-rouge"><div class="highlight"><pre class="highlight"><code>highlighted code blocks like this
</code></pre></div></div>

<p>with this icon <i class="fa fa-code" aria-hidden="true"></i> in the top right corner. These can denote either code you should enter and run, or the output of running a command. I will clearly state which of these options applies in any given case. Sometimes you will also see <code class="language-plaintext highlighter-rouge">inline code</code> like this, and again I’ll note whether these represent code you should run, or the output of code.</p>

<blockquote>
  <p>A brief aside on Git-speak: these periodic indented blocks will explain the terminology that Git uses to help you understand what each Git command actually does.</p>
</blockquote>

<h1 id="getting-started">Getting started</h1>

<p>Two of the most popular programs available for building static sites from Markdown files are <a href="https://jekyllrb.com/">Jekyll</a> and <a href="https://gohugo.io/">Hugo</a>. Relevant for us is that each one has a full-featured theme for academic websites that you’ve probably seen before. There are plenty of differences under the hood, but the most important one for building an academic website is that Hugo integrates nicely with the <a href="https://bookdown.org/yihui/blogdown/"><code class="language-plaintext highlighter-rouge">blogdown</code></a> R package, letting you write your website entirely in R. I chose Jekyll over Hugo because I liked the <a href="https://academicpages.github.io/">Jekyll theme</a> better than the <a href="https://academic-demo.netlify.app/">Hugo one</a>. My life might have been easier if I’d gone with Hugo and <code class="language-plaintext highlighter-rouge">blogdown</code>, but here we are. Consequently, this tutorial will show you how to set up an academic website using Jekyll.</p>

<h2 id="github">GitHub</h2>

<p>The first thing you need to do is create a GitHub account if you don’t already have one. If you do have one, great! If you don’t already have an account, think about your username carefully. Unless you set up a custom domain name (which we’ll cover in a separate post), your website’s URL will be &lt;yourusername&gt;.github.io. Setting up a custom domain name is a little trick and isn’t free, so pick a username that works as a URL as well.</p>

<blockquote>
  <p>Git-speak aside: the basic unit of GitHub is the <em>repository</em>. Repositories are just folders (directories, if you want to be pedantic), but Git keeps a record of the files in the folders. We’ll start by making a repository on GitHub and then later download that repository to our computer. In both cases, it’s just a folder. The magic of Git is that we can link the two so that changes you make in your local repository (the one on your computer) will sync with the remote repository (the one on GitHub). When people (myself included) get lazy, they’ll often shorten repository to ‘repo’.</p>
</blockquote>

<p>Once you’ve logged into GitHub, the next step is to head over to the <a href="https://github.com/academicpages/academicpages.github.io">repository</a> for the template we’ll be using. We need to copy the template so we can get our own version that we can mess around with. In GitHub parlance we need to <em>fork</em> the template repository to get our own copy. Find the Fork button at the top right of the template repository (highlighted in green below), and click it.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p><img src="/images/posts/creating-website/fork.png" alt="" /></p>

<p>After a brief wait (and an amusing GIF), you’ll land at your forked copy of the repo. If you look closely, you’ll notice that the name in the top left has changed. Where it originally said “academicpages/academicpages.github.io” it should now read “&lt;yourusername&gt;/academicpages.github.io”. As you can see below, for me this is now “jayrobwilliams/academicpages.github.io”. We need to change this! Not just so people know that this is your website, but to get it online. Click the Settings button with the <i class="fa fa-fw fa-cog" aria-hidden="true"></i> icon (highlighted in green below).</p>

<p><img src="/images/posts/creating-website/settings.png" alt="" /></p>

<p>This will, unsurprisingly, take you to the Settings page. The very first option (highlighted in green below) is the repository name, and that’s all we need to worry about now. It should look like this, with &lt;yourusername&gt; in place of jayrobwilliams before the .github.io. Now, we need to change the repository name to &lt;yourusername&gt;.github.io. It’s important that the first part of the repo name <em>exactly</em> match your GitHub username, or you’ll run into trouble later when putting your website online.</p>

<p><img src="/images/posts/creating-website/rename.png" alt="" /></p>

<p>In my case, I renamed the repo to “jayrobwilliams.github.io” because my GitHub username is jayrobwilliams.</p>

<p><img src="/images/posts/creating-website/renamed.png" alt="" /></p>

<p>We’ve told GitHub that this repository is for our website, so now it’s time to start working on that website. To do that, we need to get the files for our website into our computer.</p>

<p><img src="/images/posts/creating-website/zoolander.gif" alt="" class="align-center" /></p>

<h2 id="git">Git</h2>

<p>Since we’re going to host our website on GitHub, you’ll need to make sure you have <a href="https://git-scm.com/">Git</a> installed. Git is a version control system designed to let teams of programmers collaborate on projects seamlessly. For us, it’s just going to be the way that we upload files for our webpage to GitHub. You can download Git from the <a href="https://git-scm.com/downloads">official downloads page</a>, but there are a couple of easier ways. If you’re on MacOS, you can install Git via the Xcode Command Line Tools by running</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>git
</code></pre></div></div>

<p>This has the advantage of also installing a Ruby development environment, which we’ll need later. If you’re on Windows, you should download <a href="https://gitforwindows.org/">Git Bash</a>. While the Git you’ll get from the official website will work just fine, Git Bash emulates a Unix terminal, meaning that you’ll use Unix commands instead of the Windows commands you’d use in <code class="language-plaintext highlighter-rouge">cmd.exe</code>. Why is this useful? I use MacOS and Linux, so this tutorial is written from that perspective. Beyond my laziness in not providing the equivalent Windows commands alongside the Unix ones, most Git related information you’ll find online at places like <a href="https://stackoverflow.com/questions/tagged/git">Stack Overflow</a> will be written for a Unix audience. By using Git Bash, you’ll be able to follow any advice you find and not have to translate it into Windows commands. Most (all??) Linux distributions ship with Git, so you should be good to go if you’re using Linux.</p>

<p>Now that you’ve got Git, you can download the files that will make up your website to your compute. To do that, we’ll <em>clone</em> the repository from GitHub to our computer.</p>

<blockquote>
  <p>Git-speak aside: cloning a repository means creating a local repository (folder) on your computer that’s connected to the remote repository (on GitHub). Cloning differs from downloading in that you are setting up a connection between the two folders so you can keep changes you make locally synced up with the remote repository (which is where GitHub will build your website from).</p>
</blockquote>

<p>Find the green Clone or Download button on the right side of your repository’s page (highlighted in green below). When you click it, a dialog will pop up that contains the URL you will use to clone your repository to your computer. Click the clipboard icon to the right, and the URL will be copied to your clipboard.</p>

<p><img src="/images/posts/creating-website/clone.png" alt="" /></p>

<p>Once you’ve done that, open a terminal and navigate to where you want your website’s folder to live. I keep mine at the top level of my Dropbox, so I would type</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">cd ~/Dropbox
</span></code></pre></div></div>

<p>to navigate there. Use the <code class="language-plaintext highlighter-rouge">pwd</code> command to verify you’re in the right place; if you’re also putting your website at the top level of your dropbox, the output should be <code class="language-plaintext highlighter-rouge">/Users/&lt;yourusername&gt;/Dropbox/</code>. Now it’s time to clone our GitHub repo to our computer and create our local repo.</p>

<p>Do this by typing</p>

<div class="language-bash no-copy highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/&lt;yourusername&gt;/&lt;yourusername&gt;.github.io.git
</code></pre></div></div>

<p>and running it. This will create a folder called <code class="language-plaintext highlighter-rouge">&lt;yourusername&gt;.github.io</code>, which is honestly kind of clunky and not instantly informative when you’re scanning through your files. To give it a more informative name e.g, Website, run</p>

<div class="language-bash no-copy highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/&lt;yourusername&gt;/&lt;yourusername&gt;.github.io.git Website
</code></pre></div></div>

<p>Adding <code class="language-plaintext highlighter-rouge">Website</code> at the end will clone the GitHub repo into a folder called ‘Website’ instead of <code class="language-plaintext highlighter-rouge">&lt;yourusername&gt;.github.io</code>.</p>

<h1 id="making-it-yours">Making it yours</h1>

<p>Now that you’ve got all the files needed to build your website on your computer, it’s time to start personalizing this generic template!</p>

<h2 id="editing-pages">Editing pages</h2>

<p>All of the actual content of your site is contained in <code class="language-plaintext highlighter-rouge">.md</code> files, which are Markdown files. Most of these files live in the <code class="language-plaintext highlighter-rouge">_pages</code> directory. The <a href="https://academicpages.github.io/markdown/">documentation</a> that comes with the template is relatively straightforward, and does a pretty good job telling you how to customize your site. For example, the landing page can be changed by editing the <code class="language-plaintext highlighter-rouge">_pages/about.md</code> file and the sidebar information is controlled by the <code class="language-plaintext highlighter-rouge">_config.yml</code> file. Let’s start by editing <code class="language-plaintext highlighter-rouge">_config.yml</code> to rename put our name on the site and change the sidebar to reflect our information.</p>

<p>I’ve copied the first several lines of <code class="language-plaintext highlighter-rouge">_config.yml</code> below:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Welcome to Jekyll!</span>
<span class="c1">#</span>
<span class="c1"># This config file is meant for settings that affect your entire site, values</span>
<span class="c1"># which you are expected to set up once and rarely need to edit after that.</span>
<span class="c1"># For technical reasons, this file is *NOT* reloaded automatically when you use</span>
<span class="c1"># `jekyll serve`. If you change this file, please restart the server process.</span>

<span class="c1"># Site Settings</span>
<span class="na">locale                   </span><span class="pi">:</span> <span class="s2">"</span><span class="s">en-US"</span>
<span class="na">title                    </span><span class="pi">:</span> <span class="s2">"</span><span class="s">Your</span><span class="nv"> </span><span class="s">Name</span><span class="nv"> </span><span class="s">/</span><span class="nv"> </span><span class="s">Site</span><span class="nv"> </span><span class="s">Title"</span>
<span class="na">title_separator          </span><span class="pi">:</span> <span class="s2">"</span><span class="s">-"</span>
<span class="na">name                     </span><span class="pi">:</span> <span class="nl">&amp;name</span> <span class="s2">"</span><span class="s">Your</span><span class="nv"> </span><span class="s">Name"</span>
<span class="na">description              </span><span class="pi">:</span> <span class="nl">&amp;description</span> <span class="s2">"</span><span class="s">personal</span><span class="nv"> </span><span class="s">description"</span>
<span class="na">url                      </span><span class="pi">:</span> <span class="s">https://academicpages.github.io</span> <span class="c1"># the base hostname &amp; protocol for your site e.g. "https://mmistakes.github.io"</span>
<span class="na">baseurl                  </span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span> <span class="c1"># the subpath of your site, e.g. "/blog"</span>
<span class="na">repository               </span><span class="pi">:</span> <span class="s2">"</span><span class="s">academicpages/academicpages.github.io"</span>
<span class="na">teaser                   </span><span class="pi">:</span>  <span class="c1"># filename of teaser fallback teaser image placed in /images/, .e.g. "500x300.png"</span>
<span class="na">breadcrumbs              </span><span class="pi">:</span> <span class="no">false</span> <span class="c1"># true, false (default)</span>
<span class="na">words_per_minute         </span><span class="pi">:</span> <span class="m">160</span>
<span class="na">future                   </span><span class="pi">:</span> <span class="no">true</span>
<span class="na">read_more                </span><span class="pi">:</span> <span class="s2">"</span><span class="s">disabled"</span> <span class="c1"># if enabled, adds "Read more" links to excerpts</span>
<span class="na">talkmap_link             </span><span class="pi">:</span> <span class="no">false</span> <span class="c1">#change to true to add</span>
</code></pre></div></div>

<p>You’ll want to change the following things:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">"Your Name / Site Title"</code> to your name</li>
  <li><code class="language-plaintext highlighter-rouge">&amp;name "Your Name"</code> to your name</li>
  <li><code class="language-plaintext highlighter-rouge">https://academicpages.github.io</code> to the name of your repository (and also your github username) i.e., <code class="language-plaintext highlighter-rouge">https://&lt;yourusername&gt;.github.io</code></li>
  <li><code class="language-plaintext highlighter-rouge">"academicpages/academicpages.github.io"</code> to your GitHub username and the repo name i.e., <code class="language-plaintext highlighter-rouge">"&lt;yourusername&gt;/&lt;yourusername&gt;.github.io"</code></li>
</ul>

<p>When you’re finished, it should look like this:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Welcome to Jekyll!</span>
<span class="c1">#</span>
<span class="c1"># This config file is meant for settings that affect your entire site, values</span>
<span class="c1"># which you are expected to set up once and rarely need to edit after that.</span>
<span class="c1"># For technical reasons, this file is *NOT* reloaded automatically when you use</span>
<span class="c1"># `jekyll serve`. If you change this file, please restart the server process.</span>

<span class="c1"># Site Settings</span>
<span class="na">locale                   </span><span class="pi">:</span> <span class="s2">"</span><span class="s">en-US"</span>
<span class="na">title                    </span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;Your</span><span class="nv"> </span><span class="s">Name&gt;"</span>
<span class="na">title_separator          </span><span class="pi">:</span> <span class="s2">"</span><span class="s">-"</span>
<span class="na">name                     </span><span class="pi">:</span> <span class="nl">&amp;name</span> <span class="s2">"</span><span class="s">&lt;Your</span><span class="nv"> </span><span class="s">Name&gt;"</span>
<span class="na">description              </span><span class="pi">:</span> <span class="nl">&amp;description</span> <span class="s2">"</span><span class="s">personal</span><span class="nv"> </span><span class="s">description"</span>
<span class="na">url                      </span><span class="pi">:</span> <span class="s">https://&lt;yourusername&gt;.github.io</span> <span class="c1"># the base hostname &amp; protocol for your site e.g. "https://mmistakes.github.io"</span>
<span class="na">baseurl                  </span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span> <span class="c1"># the subpath of your site, e.g. "/blog"</span>
<span class="na">repository               </span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;yourusername&gt;/&lt;yourusername&gt;.github.io"</span>
<span class="na">teaser                   </span><span class="pi">:</span>  <span class="c1"># filename of teaser fallback teaser image placed in /images/, .e.g. "500x300.png"</span>
<span class="na">breadcrumbs              </span><span class="pi">:</span> <span class="no">false</span> <span class="c1"># true, false (default)</span>
<span class="na">words_per_minute         </span><span class="pi">:</span> <span class="m">160</span>
<span class="na">future                   </span><span class="pi">:</span> <span class="no">true</span>
<span class="na">read_more                </span><span class="pi">:</span> <span class="s2">"</span><span class="s">disabled"</span> <span class="c1"># if enabled, adds "Read more" links to excerpts</span>
<span class="na">talkmap_link             </span><span class="pi">:</span> <span class="no">false</span> <span class="c1">#change to true to add</span>
</code></pre></div></div>

<p>This will put your name on the website and tell GitHub where to look for the files that make up your site. Now let’s check out our changes and make sure everything’s working like it’s supposed to!</p>

<h2 id="previewing-your-website">Previewing your website</h2>

<p>Once we upload our modified files to GitHub (and tell GitHub to turn them into a website, which we’ll cover below), they’re out there on the internet for everyone to see. If you’re like me, you’ll make a lot of mistakes when working on your website. There’s no need to broadcast all of those mistakes to the world, and we can avoid this very easily by previewing our website locally. What this means is building the site from the various <code class="language-plaintext highlighter-rouge">.md</code> files, rendering it to HTML, and then viewing it. We can do all of that on our computer without ever having to put it online.</p>

<p>To preview your website locally, you’ll need to install Jekyll on your computer. The easiest way to do this is with <a href="https://bundler.io/">Bundler</a>. Bundler is a package manager for Ruby, which is the programming language that Jekyll is written in. This means that we need a full Ruby development environment to get Jekyll working to run our website locally. If you’re on Windows, <a href="https://rubyinstaller.org/">RubyInstaller</a> will give you everything you need. If you’re on MacOS, your computer comes with Ruby, but not the development headers required for Bundler to work. If you installed Git via the Xcode Command Line tools earlier, you’re good to go here. If not, you can install Ruby Ruby via <a href="https://brew.sh">Homebrew</a> with</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>ruby-full build-essential zlib1g-dev
</code></pre></div></div>

<p>If you’re on Linux, just install Ruby via your package manager. Once that’s taken care of, it’s time to install Bundler. Do so by running</p>

<p>set up a gem installation directory for your user account. The following commands will add environment variables to your ~/.bashrc file to configure the gem installation path:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">echo '#</span><span class="w"> </span>Install Ruby Gems to ~/gems<span class="s1">' &gt;&gt; ~/.bashrc
</span><span class="gp">echo 'export GEM_HOME="$</span><span class="s1">HOME/gems"'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="gp">echo 'export PATH="$</span>HOME/gems/bin:<span class="nv">$PATH</span><span class="s2">"' &gt;&gt; ~/.bashrc
</span><span class="go">source ~/.bashrc
</span></code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>bundler
</code></pre></div></div>

<p>in a terminal. If you’ve navigated away from the directory where your website is located (which is <code class="language-plaintext highlighter-rouge">~/Dropbox/Website</code> for me), head back there now. Do this with</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Dropbox/Website
</code></pre></div></div>

<p>but replace <code class="language-plaintext highlighter-rouge">~/Dropbox/Website</code> with the path to your website’s repo. Next, we need to install any packages (called ‘gems’ in Ruby) that Jekyll depends on. This is where Bundler shines by taking care of this whole process for us; it reads the <code class="language-plaintext highlighter-rouge">Gemfile</code> included with the source code and installs all required gems</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">install</span>
</code></pre></div></div>

<p>If you want to see what’s been installed, run <code class="language-plaintext highlighter-rouge">gem list</code> before and after <code class="language-plaintext highlighter-rouge">bundle install</code>. If everything worked correctly, you can now launch your website! What we’re going to do is start a webserver on your computer, which will let you access your website locally without having to put it out on the internet. We do this with</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">bundle exec</code> command is just a prefix that lets ruby access all of the gems specified in the <code class="language-plaintext highlighter-rouge">gemfile</code>. The <code class="language-plaintext highlighter-rouge">jekyll serve</code> command builds your website and starts a webserver so that you can view it locally. To access your website, open a browser and go to <code class="language-plaintext highlighter-rouge">127.0.0.1:4000</code> or <code class="language-plaintext highlighter-rouge">localhost:4000</code>. It should look exactly like the <a href="https://academicpages.github.io/">example</a> site.</p>

<p>This is a special version of your site that’s only accessible from your computer; no one else can see it! So this is the perfect place to play around, experiment, and see how to make your site do what you want it to. This process is surprisingly easy. Make a change to a file e.g., editing <code class="language-plaintext highlighter-rouge">_pages/about.md</code> to introduce yourself, and save the file. That’s all you have to do; Jekyll will notice the change to the file and automatically rebuild the site. All that’s left to do is refresh your browser so you can see the changes!</p>

<p>Once you’ve made a couple changes to see how it works, you might want to turn off the webserver and make lots of changes, then check out your handiwork. Or maybe you’re just done working on your website for now. Either way, it’s time to shut down the webserver. To do so, you can just close the terminal window, but you’ll get a warning like this.</p>

<p><img src="/images/posts/creating-website/terminate.png" alt="" /></p>

<p>To save yourself some time and do this faster, simply press <kbd>Ctrl</kbd>+<kbd>c</kbd>.<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></p>

<h1 id="getting-online">Getting online</h1>

<p>Alright, you’ve made some changes from the template, checked them out locally, and you’re ready to share your website with the world. This is a two step process. First we need to upload all of our modified files to the GitHub repo we forked from the template. Then we need to configure GitHub Pages to build and deploy our website. Finally, if you want a custom domain name, we need to do some configuration outside of GitHub Pages to connect your domain name with your website.</p>

<h2 id="uploading-changes-to-github">Uploading changes to GitHub</h2>

<p>To upload your changes to GitHub, we first have to make Git locally aware of them. We do this by committing the changes, then pushing them to the repo on GitHub</p>

<blockquote>
  <p>Git-speak aside: Git stores file histories as a series of changes or differences. A batch of changes (which can include changes in one or more files) is called a <em>commit</em>. When you want to tell the remote repo (the one on GitHub) about changes you’ve made, you <em>push</em> a commit from the local repo to the remote one. Once you do this, GitHub looks at the differences and modifies the files in the remote repo.</p>
</blockquote>

<p>Before we can commit the changes, we need to stage them. This just involves telling Git what changes we want to commit. To make our lives easier, let’s check in on what changes we’ve made</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git status
</code></pre></div></div>

<p>You should get results that look something similar to this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

	modified:   _config.yml

Untracked files:
  (use "git add &lt;file&gt;..." to include in what will be committed)

	Gemfile.lock

no changes added to commit (use "git add" and/or "git commit -a")
</code></pre></div></div>

<p>We can ignore the first part for now. The second part (<code class="language-plaintext highlighter-rouge">Changes not staged for commit</code>) will list any files that Git knows about that have changed. The third part (<code class="language-plaintext highlighter-rouge">Untracked files</code>) includes files we haven’t told Git about, so as far as it’s concerned they don’t exist. I’ve edited <code class="language-plaintext highlighter-rouge">_config.yml</code> to replace the template’s information with my own, so it shows up here. If you want to verify the changes you made, you’ll want to <em>diff</em> the file. Do this with</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git diff _config.yml
</code></pre></div></div>

<p>This is what the output looked like for me. Note that your output may or may not be color-coded depending on what type of system you’re on and your Git settings.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/_config.yml b/_config.yml
index 1dc605c..4affb4e 100644
</span><span class="gd">--- a/_config.yml
</span><span class="gi">+++ b/_config.yml
</span><span class="p">@@ -7,13 +7,13 @@</span>
 
 # Site Settings
 locale                   : "en-US"
<span class="gd">-title                    : "Your Name / Site Title"
</span><span class="gi">+title                    : "Mohammad Shamshad"
</span> title_separator          : "-"
<span class="gd">-name                     : &amp;name "Your Name"
</span><span class="gi">+name                     : &amp;name "Mohammad Shamshad"
</span> description              : &amp;description "personal description"
<span class="gd">-url                      : https://academicpages.github.io # the base hostname &amp; protocol for your site e.g. "https://mmistakes.github.io"
</span><span class="gi">+url                      : https://shamshadm.github.io # the base hostname &amp; protocol for your site e.g. "https://mmistakes.github.io"
</span> baseurl                  : "" # the subpath of your site, e.g. "/blog"
<span class="gd">-repository               : "academicpages/academicpages.github.io"
</span><span class="gi">+repository               : "shamshadM/shamshadm.github.io"
</span> teaser                   :  # filename of teaser fallback teaser image placed in /images/, .e.g. "500x300.png"
 breadcrumbs              : false # true, false (default)
 words_per_minute         : 160
</code></pre></div></div>

<p>Each line that begins with a <code class="language-plaintext highlighter-rouge">+</code> indicates an insertion and each line that starts with a <code class="language-plaintext highlighter-rouge">-</code> is a deletion. You can see that I’ve just replaced the generic information with mine. Now that we’re confident in the changes we made to <code class="language-plaintext highlighter-rouge">_config.yml</code>, we need to tell Git to record them. We first stage the file with</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add _config.yml
</code></pre></div></div>

<p>which stages the file. If we re-run <code class="language-plaintext highlighter-rouge">git status</code>, we’ll see</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git reset HEAD &lt;file&gt;..." to unstage)

	modified:   _config.yml

Untracked files:
  (use "git add &lt;file&gt;..." to include in what will be committed)

	Gemfile.lock
</code></pre></div></div>

<p>You’ll notice that <code class="language-plaintext highlighter-rouge">_config.yml</code> has moved from <code class="language-plaintext highlighter-rouge">Changes not staged for commit</code> to <code class="language-plaintext highlighter-rouge">Changes to be committed</code> (<code class="language-plaintext highlighter-rouge">Changes not staged for commit</code> has disappeared since we haven’t made any changes to other files that Git is tracking). Now we’re finally ready to commit our changes!</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit <span class="nt">-m</span> <span class="s2">"add my info to config file"</span>
</code></pre></div></div>

<p>This tells Git to record the changes we made to <code class="language-plaintext highlighter-rouge">_config.yml</code>. The <code class="language-plaintext highlighter-rouge">-m "add my info to config file"</code> is the <em>commit message</em> for this commit.<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup> You should see something like this, but with a different number after <code class="language-plaintext highlighter-rouge">master</code> on the first line.<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[master a8af7b1] add my info to config file
 1 file changed, 4 insertions(+), 4 deletions(-)
</code></pre></div></div>

<p>That means our changes have been recorded locally by Git. Once we’ve committed our changes to <code class="language-plaintext highlighter-rouge">_config.yml</code>, it’s time to upload them to GitHub! We do this by pushing the changes to GitHub, which will then modify its copies of the files to match ours. This is (relatively) straightforward</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push
</code></pre></div></div>

<p>Git will then prompt you for your username and password.<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup> This will be your GitHub username and password. Enter each of them and you should be good to go! If everything goes smoothly, you will see a message something like this</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Enumerating objects: 9, done.
Counting objects: 100% (9/9), done.
Delta compression using up to 4 threads
Compressing objects: 100% (5/5), done.
Writing objects: 100% (5/5), 426 bytes | 426.00 KiB/s, done.
Total 5 (delta 4), reused 0 (delta 0)
remote: Resolving deltas: 100% (4/4), completed with 4 local objects.
To github.com:jayrobwilliams/jayrobwilliams.github.io.git
   83c3bc4..a8af7b1  master -&gt; master
</code></pre></div></div>

<p>This is just Git telling you exactly how it recorded the changes and uploaded them to GitHub, the content of it doesn’t matter and you can ignore it. If things don’t go smoothly, you may get an error that looks something like this</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fatal: No configured push destination.
Either specify the URL from the command-line or configure a remote repository using

    git remote add &lt;name&gt; &lt;url&gt;

and then push using the remote name

    git push &lt;name&gt;
</code></pre></div></div>

<p>Your repo on github is the “remote” that your local Git needs access to. To fix this error, we just need to tell Git where to find the remote</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
git remote add origin https://github.com/&lt;yourusername&gt;/&lt;yourusername&gt;.github.io.git
git push <span class="nt">-u</span> origin master
</code></pre></div></div>

<p>The next step is to go to GitHub and check our your changed file. Head back to your repository (https://github.com/&lt;yourusername&gt;/&lt;yourusername&gt;.github.io, as a reminder) and click the commits button at the bottom left (highlighted in green below).</p>

<p><img src="/images/posts/creating-website/commits.png" alt="" /></p>

<p>On the commits page, you should see the commit you just made</p>

<p><img src="/images/posts/creating-website/commit.png" alt="" /></p>

<p>If you do, then you’re all set.</p>

<h2 id="going-live">Going live</h2>

<p>All that’s left to do now is take our website live. If using git on the command line has been stressing you out, you’ll be glad to know that this part happens entirely in your browser.</p>

<p><img src="/images/posts/creating-website/live.gif" alt="" class="align-center" /></p>

<p>You want to go back to the settings page for your repo (the button with the <i class="fa fa-fw fa-cog" aria-hidden="true"></i> at the top right of the page) since that’s where we’ll turn this collection of files into a website. Scroll down until you get to the GitHub Pages section Click the dropdown currently labeled “None” under the “Source” subheading, and choose “master branch” from the popup (highlighted in green below).<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup></p>

<p><img src="/images/posts/creating-website/pages.png" alt="" /></p>

<p>Once you do this, the page should reload. Scroll back down to the “GitHub Pages” heading, and there should be a message at the top that “Your site is ready to be published at https://&lt;yourusername&gt;.github.io/”. You can see what this looks like for me below</p>

<p><img src="/images/posts/creating-website/publish.png" alt="" /></p>

<p>Now, here’s where things may get a little tricky. Go to https://&lt;yourusername&gt;.github.io/ and see if there’s a website there. If there is, skip down to the last section below. If not, go back to the settings page for your repo and see if there’s still a “ready to be published” message. If there is, you may have to push an additional change to the repo to trigger building your site. Editing <code class="language-plaintext highlighter-rouge">_pages/about.md</code> to personalize the welcome message and short biography is a good candidate here. Once you’ve personalized your site’s landing page, record the changes and push them to the repo</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add _pages/about.md
git commit <span class="nt">-m</span> <span class="s2">"edit welcome page"</span>
git push
</code></pre></div></div>

<p>Then head back to the repo’s settings page and see if the “ready to be published” message has changed to “<i class="fa fa-fw fa-check" aria-hidden="true"></i> Your site is published at https://&lt;yourusername&gt;.github.io/”. You can see what this looks like for my website below</p>

<p><img src="/images/posts/creating-website/published.png" alt="" /></p>

<p>You’ll notice that the URL for my site is https:/shamshad.in. I’ll cover how to get a custom domain name for your site in a future post.</p>

<h1 id="next-steps">Next steps</h1>

<p>Congratulations! You now have a professional looking academic website that’s yours forever; you won’t lose access to it when you leave your current institution. At this point you should continue making it your own by adding information on your research projects (edit the <code class="language-plaintext highlighter-rouge">.md</code> files in <code class="language-plaintext highlighter-rouge">_portfolio</code> folder to have them populate the Portfolio page with information on each of your research projects), teaching experience (<code class="language-plaintext highlighter-rouge">_pages/teaching.md</code>), and accomplishments (<code class="language-plaintext highlighter-rouge">_pages/cv.md</code>). Remember that you can preview any changes locally with <code class="language-plaintext highlighter-rouge">bundle exec jeykll serve</code>. If you add any new files, like PDFs of your working papers or publications, be sure to <code class="language-plaintext highlighter-rouge">git add</code> them as well, so that they’ll be uploaded to your repo with the next <code class="language-plaintext highlighter-rouge">git push</code>. You may have noticed that there are lots of small differences between my website and the template, and not just in terms of content. In a future post, I’ll talk about how to further customize the look of your site to make it feel more unique.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>GitHub might look a little different for you since it recently went through a <a href="https://github.blog/changelog/2020-06-23-design-updates-to-repositories-and-github-ui/">redesign</a>. Everything you’re looking for is still there and should be recognizable from the images. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Yes, even if you’re on MacOS; <kbd>Ctrl</kbd>+<kbd>c</kbd> has been the way to cancel programs on the command line since the 1960s while the <kbd>&#8984;</kbd> key did not exist on computers until the Macintosh in <a href="https://en.wikipedia.org/wiki/Command_key#Origin_of_the_symbol">1984</a>, and the terminal is olddd. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>Yes, you can omit the <code class="language-plaintext highlighter-rouge">-m "..."</code> with <code class="language-plaintext highlighter-rouge">git commit</code>, but it will open up your system’s default editor (likely vim, emacs, or nano), none of which are remotely beginner-friendly. Until you decide to learn one of them, <code class="language-plaintext highlighter-rouge">git commit -m</code> is perfectly fine. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>This is the <em>hash</em> for the commit; it’s a 40 digit string that uniquely identifies the changes that you’re committing. This is useful if you want to retrace your steps or undo things in the <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>If you’ve set up <a href="https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh">SSH authentication</a> for GitHub, then you won’t be prompted to enter your credentials. <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6" role="doc-endnote">
      <p>Ignore the “Choose a theme” button; it’s for use with bare bones GitHub pages sites and the academicpages template supplies all the components for its theme. <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>M. Shamshad</name><email>shamshad.rattan@gmail.com</email></author><category term="website" /><category term="website" /><category term="git" /><category term="github" /><summary type="html"><![CDATA[If you’re an academic, you need a website. Obviously I agree with this since you’re reading this on my website, but if you don’t have one, you should get one. Most universities these days provide a free option, usually powered by WordPress (both WashU and UNC use WordPress for their respective offerings). While these sites are quick to set up and come with the prestige of a .edu URL, they have several drawbacks that have been extensively written on.]]></summary></entry><entry><title type="html">Combining PDF Documents the Smarter Way</title><link href="http://localhost:4000/posts/2019/07/combining-pdfs-naturally/" rel="alternate" type="text/html" title="Combining PDF Documents the Smarter Way" /><published>2019-07-08T00:00:00+05:30</published><updated>2024-10-06T20:53:46+05:30</updated><id>http://localhost:4000/posts/2019/07/combining-pdfs-naturally</id><content type="html" xml:base="http://localhost:4000/posts/2019/07/combining-pdfs-naturally/"><![CDATA[<p>My previous <a href="/posts/2019/06/combining-pdfs/">post</a> on combining multiple PDF files had an important caveat that things would end up in the wrong order if you had files with leading ID numbers that started at 1 and ended at 12, you’d end up with PDFs combined in the order 1, 10, 11, 12, 2, 3, …, 9.
<!--more-->
This is because the default sort in Bash is an alphabetic sort. This is just our standard alphabetic sort, but it gets tripped up when dealing with numbers. We can think of it as a type of ‘greedy’ algorithm because it sorts all inputs by the first character, before moving onto the second character within each subset. This behavior is fine (and desirable!) for words, but fails with numbers.</p>

<p>We want to use a <a href="https://en.wikipedia.org/wiki/Natural_sort_order">natural sort</a>, which is just an alphabetic sort that treats multi-digit numbers as numbers instead of a collection of characters. A natural sort of our files would combine them in the order 1, 2, 3, 4, 5, …, 12, 13. That means a natural sort can handle a wider range of numbering styles!</p>

<h1 id="how-it-works">How it Works</h1>

<p>This script uses the same basic idea as the first one, but sorting the input files with a natural sort requires some Bash tricks. This time around the code is</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nv">$# </span><span class="nt">-eq</span> 0 <span class="o">]]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">printf</span> <span class="s1">'%s\0'</span> ./<span class="k">*</span>.pdf | <span class="nb">sort</span> <span class="nt">-zV</span> | xargs <span class="nt">-0</span> gs <span class="nt">-dBATCH</span> <span class="nt">-dNOPAUSE</span> <span class="nt">-q</span> <span class="nt">-sDEVICE</span><span class="o">=</span>pdfwrite <span class="nt">-sOutputFile</span><span class="o">=</span>output.pdf
<span class="k">else
  </span><span class="nb">printf</span> <span class="s1">'%s\0'</span> ./<span class="k">*</span>.pdf | <span class="nb">sort</span> <span class="nt">-zV</span> xargs <span class="nt">-0</span> gs <span class="nt">-dBATCH</span> <span class="nt">-dNOPAUSE</span> <span class="nt">-q</span> <span class="nt">-sDEVICE</span><span class="o">=</span>pdfwrite <span class="nt">-sOutputFile</span><span class="o">=</span><span class="nv">$1</span>
<span class="k">fi</span>
</code></pre></div></div>

<p>This looks complicated, so let’s break it down into individual parts. Each part is separated by a <code class="language-plaintext highlighter-rouge">|</code>, or pipe, which directs the output from one function to the next. If you’ve ever used magrittr’s pipes (<code class="language-plaintext highlighter-rouge">%&gt;%</code>) in R, the concept is exactly the same.</p>

<h2 id="printf"><code class="language-plaintext highlighter-rouge">printf</code></h2>

<p>The first part of the first Ghostscript line is</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">printf</span> <span class="s1">'%s\0'</span> ./<span class="k">*</span>.pdf
</code></pre></div></div>

<p>. The <code class="language-plaintext highlighter-rouge">printf</code> command is a <em>very</em> old C command, ported to Bash as a <strong>shell builtin</strong>. It allows you to print multiple inputs while formatting the output produced. <code class="language-plaintext highlighter-rouge">printf</code> uses <strong>format specifiers</strong> to tell the function how to print inputs. While it can be used to format integers and doubles, we’re going to be dealing with filenames, which are strings, and denoted with <code class="language-plaintext highlighter-rouge">'%s'</code>.</p>

<p>When we give <code class="language-plaintext highlighter-rouge">printf</code> more than one input, we need to tell it what type of <strong>separator</strong> to use, otherwise it will just print all of the inputs in one giant string. If you use a <strong>newline</strong> (<code class="language-plaintext highlighter-rouge">\n</code>), then <code class="language-plaintext highlighter-rouge">printf</code> will produce output equivalent to <code class="language-plaintext highlighter-rouge">ls *.pdf</code>. For our purposes, we want to use a <strong>null terminator</strong> (<code class="language-plaintext highlighter-rouge">\0</code>) to separate inputs. You can’t actually see null terminators in the printed output, but any commands you pass them to will be able to.</p>

<h2 id="sort"><code class="language-plaintext highlighter-rouge">sort</code></h2>

<p>The next part of the first Ghostscript line is</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sort</span> <span class="nt">-zV</span>
</code></pre></div></div>

<p>This is where the magic happens that properly sorts our input files even if their numbers are missing leading zeroes. The <code class="language-plaintext highlighter-rouge">-z</code> flag tells <code class="language-plaintext highlighter-rouge">sort</code> to return the sort inputs still separated by null terminators, while the <code class="language-plaintext highlighter-rouge">-V</code> flag performs a <strong>version sort</strong>, the function’s name for a natural sort.</p>

<h2 id="xargs"><code class="language-plaintext highlighter-rouge">xargs</code></h2>

<p>The final part of the first Ghostscript line is</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xargs <span class="nt">-0</span> gs <span class="nt">-dBATCH</span> <span class="nt">-dNOPAUSE</span> <span class="nt">-q</span> <span class="nt">-sDEVICE</span><span class="o">=</span>pdfwrite <span class="nt">-sOutputFile</span><span class="o">=</span>output.pdf
</code></pre></div></div>

<p>This is almost identical to the <code class="language-plaintext highlighter-rouge">gs</code> call in the simpler script. However, that script had <code class="language-plaintext highlighter-rouge">*.pdf</code> at the end as the “files” argument to <code class="language-plaintext highlighter-rouge">gs</code>. That won’t work for us here as we had to use <code class="language-plaintext highlighter-rouge">printf</code> and <code class="language-plaintext highlighter-rouge">sort</code> first to get our document correctly sorted. <code class="language-plaintext highlighter-rouge">xargs</code> converts the standard input produced by <code class="language-plaintext highlighter-rouge">|</code> into arguments that <code class="language-plaintext highlighter-rouge">gs</code> can accept.</p>

<p>The <code class="language-plaintext highlighter-rouge">-0</code> flag tells the function to expect null terminators as separators instead of spaces or newlines. Without this flag, you’ll get an error if any of your PDFs have spaces in their filenames. This is why we’ve been using null terminators as separators all along; without them our script would be helpless against filenames with spaces in them.</p>

<p>The command we want to use, <code class="language-plaintext highlighter-rouge">gs</code> in this case, comes <em>after</em> <code class="language-plaintext highlighter-rouge">xargs</code>. You can read this line as <code class="language-plaintext highlighter-rouge">gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=output.pdf files</code> where <code class="language-plaintext highlighter-rouge">files</code> is the naturally sorted list of PDF files produced by the first two parts of the line. And we’re done!</p>

<h2 id="putting-it-all-together">Putting it all Together</h2>

<p>When you run this script, it finds all PDF files in a directory, sorts them with a natural sort, and then combines them into a single PDF document. Just like before, you can can supply an output filename.</p>

<h1 id="running-it">Running It</h1>

<p>Just like before, we need to make our script executable and add it to our PATH in order to run it. Refer to my previous <a href="/posts/2019/06/combining-pdfs/">post</a> for a reminder on how to do so. No caveats about document ID numbers this time, but you’re on your own if the publisher decided to just use chapter names with no ID numbers…</p>]]></content><author><name>M. Shamshad</name><email>shamshad.rattan@gmail.com</email></author><category term="PDF" /><category term="references" /><category term="bash" /><summary type="html"><![CDATA[My previous post on combining multiple PDF files had an important caveat that things would end up in the wrong order if you had files with leading ID numbers that started at 1 and ended at 12, you’d end up with PDFs combined in the order 1, 10, 11, 12, 2, 3, …, 9.]]></summary></entry><entry><title type="html">Combining PDF Documents</title><link href="http://localhost:4000/posts/2019/06/combining-pdfs/" rel="alternate" type="text/html" title="Combining PDF Documents" /><published>2019-06-26T00:00:00+05:30</published><updated>2024-10-06T20:53:46+05:30</updated><id>http://localhost:4000/posts/2019/06/combining-pdfs</id><content type="html" xml:base="http://localhost:4000/posts/2019/06/combining-pdfs/"><![CDATA[<p>How many times have you found that your institution has access to a digital version of a book you need only to discover that it comes in 15 different PDF files?
<!--more-->
I use <a href="https://www.zotero.org/">Zotero</a> as my reference manager and it’s difficult to attach more than one file to an entry, so I’ve certaintly spent time in the past painstakingly combining every section of a book together before adding it to Zotero. I finally got tired of doing this by hand and wrote a short Bash script to automate this process. Now I can combine as many PDFs as I want with a single command!</p>

<h1 id="how-it-works">How it works</h1>

<p>My solution relies on <a href="https://www.ghostscript.com/">Ghostscript</a> to combine multiple PDF files from the command line. On a Mac you can easily install Ghostscript using <a href="https://brew.sh/">Homebrew</a> by running</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>ghostscript
</code></pre></div></div>

<p>Once you’ve done that you’ve got everything you need. Create a shell script and put the following in it</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nv">$# </span><span class="nt">-eq</span> 0 <span class="o">]]</span><span class="p">;</span> <span class="k">then
  </span>gs <span class="nt">-dBATCH</span> <span class="nt">-dNOPAUSE</span> <span class="nt">-q</span> <span class="nt">-sDEVICE</span><span class="o">=</span>pdfwrite <span class="nt">-sOutputFile</span><span class="o">=</span>output.pdf <span class="k">*</span>.pdf
<span class="k">else
  </span>gs <span class="nt">-dBATCH</span> <span class="nt">-dNOPAUSE</span> <span class="nt">-q</span> <span class="nt">-sDEVICE</span><span class="o">=</span>pdfwrite <span class="nt">-sOutputFile</span><span class="o">=</span><span class="nv">$1</span> <span class="k">*</span>.pdf
<span class="k">fi</span>
</code></pre></div></div>

<p>The script first checks if you’ve supplied an output filename as an argument, and if not uses the default name of <code class="language-plaintext highlighter-rouge">output.pdf</code>. Be aware of where you run this script as it will overwrite a file called <code class="language-plaintext highlighter-rouge">output.pdf</code> if it exists in the active directory! If you have supplied an output filename, it will use that instead of <code class="language-plaintext highlighter-rouge">output.pdf</code>.</p>

<h2 id="running-it">Running it</h2>

<p>To actually run this script, there are two steps left:</p>

<ol>
  <li>Make it executable</li>
  <li>Add it to your PATH</li>
</ol>

<p>Making your script executable is relatively straightforward. Use the <code class="language-plaintext highlighter-rouge">chmod +x</code> command in Terminal on your script. I saved mine as <code class="language-plaintext highlighter-rouge">PDFcombine.sh</code> so I ran <code class="language-plaintext highlighter-rouge">chmod +x PDFcombine.sh</code>. Putting your script on your PATH just ensures that your Terminal will be able to find it when you call it to combine PDF files. It’s a little more complicated so I’ll just link to this <a href="https://unix.stackexchange.com/a/26059">excellent StackExchange answer</a> on how to do so. On my system this script lives in a directory in my Dropbox with similar other small utilities called <code class="language-plaintext highlighter-rouge">Bash</code>, so my <code class="language-plaintext highlighter-rouge">.bash_profile</code> has these lines in it</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># custom bash scripts                                                           </span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/Users/Rob/Dropbox/Methods/Bash
</code></pre></div></div>

<p>to add it to my PATH. As an added bonus Ghostscript will (usually) rotate any pages containing sideways tables or figures!</p>

<h1 id="a-warning">A warning</h1>

<p>This script will combine PDF files in the order that <code class="language-plaintext highlighter-rouge">ls *.pdf</code> returns them. By default, this will be an <em>alphabetic sort</em>, so the files 1.pdf, 2.pdf, and 10.pdf would be combined in the following order: 1.pdf, 10.pdf, 2.pdf.</p>

<p>You can fix this by adding leading zeroes to all filenames so that each ID string is the same length. Most digital versions of books give you filenames like this, but be sure to check, otherwise your combined PDF might require a lot of skipping around. This script can be written to perform a <em>natural sort</em> of input files, but the code to do so is more complex, so I’ll cover it in a future post.</p>]]></content><author><name>M. Shamshad</name><email>shamshad.rattan@gmail.com</email></author><category term="PDF" /><category term="references" /><category term="bash" /><summary type="html"><![CDATA[How many times have you found that your institution has access to a digital version of a book you need only to discover that it comes in 15 different PDF files?]]></summary></entry></feed>